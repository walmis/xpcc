// coding: utf-8
/* Copyright (c) 2009, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------
{{ generation_block }}

#ifndef XPCC_{{target.family | upper}}__UART{{ id }}_HPP
#define XPCC_{{target.family | upper}}__UART{{ id }}_HPP

#include "../../../device.hpp"
#include <xpcc/architecture/peripheral/uart.hpp>
#include "type_ids.hpp"

namespace xpcc
{

namespace {{target.family}}
{

/**
 * (Non-)Buffered Uart{{ id }}
 * 
 * This implementation uses a ringbuffer. The size of the ringbuffer
 * can be changed in the `project.cfg` file.
 * 
 * Just add add a value for `Uart{{ id }}.tx_buffer` and/or 
 * `Uart{{ id }}.rx_buffer` in the `defines` section. The size can
 * be any value between 1 and 254 for buffered and 0 for
 * non-buffered operation.
 * 
 * Example:
 * @code
 * [defines]
 * Uart{{ id }}.tx_buffer = 20
 * Uart{{ id }}.rx_buffer = 30
 * @endcode
 * 
 * @author	Fabian Greif
 * @author	Niklas Hauser
 * @ingroup	{{target.family}}
 */
class Uart{{ id }} : public ::xpcc::Uart
{
public:
	static const TypeId::Uart{{ id }}Txd Tx;
	static const TypeId::Uart{{ id }}Rxd Rx;
	
public:
	// start documentation inherited
	template< uint32_t baudrate >
	static ALWAYS_INLINE void
	initialize()
	{
		static_assert(F_CPU / 8l >= baudrate, "The CPU frequency must be at least 8x higher than UART baudrate.");
		static_assert((F_CPU / (16l * baudrate)) < (1 << 12), "UART baudrate is too slow for CPU frequency (Prescaler out of bounds).");

		uint16_t ubrr;
		// use double speed when necessary
		if (baudrate * 16l > F_CPU)
		{
			ubrr = 0x8000 | static_cast<uint16_t>((F_CPU / (8l * baudrate)) - 1);
		}
		else {
			ubrr = static_cast<uint16_t>((F_CPU / (16l * baudrate)) - 1);
		}

		initializeWithBaud(ubrr);
	}
	
	// MARK: write blocking
	static void
	writeBlocking(uint8_t data);
	
	static void
	writeBlocking(const uint8_t *data, std::size_t length);
	
	static void
	flushWriteBuffer();
	
	// MARK: write
	static bool
	write(uint8_t data);
	
	static std::size_t
	write(const uint8_t *data, std::size_t length);
	
	static bool
	isWriteFinished();
	
	// MARK: read
	static bool
	read(uint8_t& data);
	
	static std::size_t
	read(uint8_t *buffer, std::size_t length);
	
	// MARK: discard
	static std::size_t
	discardReceiveBuffer();
	
	static std::size_t
	discardTransmitBuffer();
	// end documentation inherited
	
	// MARK: error
	/**
	 * Check whether any errors occurred during receiving.
	 * Be aware that these indicate an error that occurred somewhere
	 * since resetting the Error Flags (with `acknowledgeErrorFlags()`), so
	 * you cannot tell which byte had the error.
	 *
	 * @return	`0` if no errors occurred, otherwise a value that
	 *			corresponds to the Error Flags in register A.
	 */
	static uint8_t
	getErrorFlags();
	
	/// Clears the error flags.
	static void
	acknowledgeErrorFlags();
	
protected:
	static void
	initializeWithBaud(uint16_t ubrr);
};

} // namespace {{target.family}}

} // namespace xpcc

#endif // XPCC_{{target.family | upper}}__UART{{ id }}_HPP
