// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------
%% if id in [1, 2, 3, 6]
%%	set uart = "Usart"
%% elif id in [4, 5]
%%	set uart = "Uart"
%% endif
%% set hal = uart ~ "Hal" ~ id

#ifndef XPCC_STM32_{{ uart | upper }}_{{ id }}_HPP
#define XPCC_STM32_{{ uart | upper }}_{{ id }}_HPP

#include <xpcc/architecture/peripheral/uart.hpp>
#include "../../../type_ids.hpp"
#include "uart_base.hpp"

namespace xpcc
{
namespace stm32
{
/**
 * Universal asynchronous receiver transmitter ({{ uart | upper ~ id }})
 *
 * @author		Kevin Laeufer
 * @ingroup		stm32
 */
class {{ uart ~ id }} : public UartBase, public ::xpcc::Uart
{
public:
	/// TypeId used to connect GPIO pins to this peripheral's rx.
	static const TypeId::Uart{{ id }}Rx Rx;
	/// TypeId used to connect GPIO pins to this peripheral's tx.
	static const TypeId::Uart{{ id }}Tx Tx;

%% if parameters.buffered
private:
	/// Second stage initialize for buffered uart
	// that need to be implemented in the .cpp
	static void
	initializeBuffered(uint32_t interruptPriority, bool blocking);
%% endif

public:
	template<class clockSource, uint32_t baudrate>
	static inline void
%% if parameters.buffered
	initialize(uint32_t interruptPriority, bool blocking = true,
				Parity parity = Parity::Disabled)
%% else
	initialize(Parity parity = Parity::Disabled)
%% endif
	{
		{{ hal }}::initialize<clockSource, baudrate>(parity);
%% if parameters.buffered
		initializeBuffered(interruptPriority, blocking);
%% endif
		{{ hal }}::setTransmitterEnable(true);
		{{ hal }}::setReceiverEnable(true);
	}

	static void
	writeBlocking(uint8_t data);

	static void
	writeBlocking(const uint8_t *data, std::size_t length);

	static void
	flushWriteBuffer();

	static bool
	write(uint8_t data);

	static std::size_t
	write(const uint8_t *data, std::size_t length);

	static bool
	isWriteFinished();

	static std::size_t
	discardTransmitBuffer();

	static bool
	read(uint8_t &data);

	static std::size_t
	read(uint8_t *buffer, std::size_t length);

	static std::size_t
	discardReceiveBuffer();
};

}
}

#endif // XPCC_STM32_{{ uart | upper }}_{{ id }}_HPP
