// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef XPCC_LPC__GPIO_HPP
#define XPCC_LPC__GPIO_HPP

#include "../../../device.hpp"

// TODO: Move to common file
#define SYSAHBCLKCTRL_GPIO			(1<<6)


static void
xpcc_gpio_enable()
{
	LPC_SYSCON->SYSAHBCLKCTRL |= SYSAHBCLKCTRL_GPIO;
}



%% if output != 'gpio_enable.h'
#include <xpcc/architecture/peripheral/gpio.hpp>

/**
 * Macros for backwards compatibility:
 */
#define	GPIO__IO(name, port, pin) \
typedef CONCAT4(::xpcc::lpc::Gpio, port, _, pin) name

#define	GPIO__OUTPUT(name, port, pin) \
typedef CONCAT4(::xpcc::lpc::GpioOutput, port, _, pin) name

#define	GPIO__INPUT(name, port, pin) \
typedef CONCAT4(::xpcc::lpc::GpioInput, port, _, pin) name


namespace xpcc
{
	namespace lpc
	{
		struct Gpio
		{
			/**
			 * \ingroup	lpc11xx
			 */
			enum InputType
			{
				FLOATING = (0 << 3),
				PULLDOWN = (1 << 3),
				PULLUP   = (2 << 3),
				REPEATER = (3 << 3),
			};

			/**
			 * \ingroup	lpc11xx
			 */
			enum OutputType
			{
				PUSH_PULL  = (0 << 10),
				OPEN_DRAIN = (1 << 10),
			};
		};

		/**
		 * Gpio Classes created from the XML Device File Gpio Description
		 */
%% for gpio in gpios
	%% set pin  = gpio.id
	%% set conf_reg  = "LPC_IOCON->PIO" ~ gpio.port ~ "_" ~ pin
	%% set gpio_reg  = "LPC_GPIO" ~ gpio.port

%% for type in ["Output", "Input", ""]
	%% set name = "Gpio" ~ type ~ gpio.port ~ "_" ~ gpio.id

		/** \brief		{{gpio.port|upper}}{{gpio.id}} {{type}}
		 *  \ingroup	stm32
		 */
		struct {{name}} : Gpio
		{
		// TODO: Add connect method in order to set function
	%% if type == "" or type == "Output"
			ALWAYS_INLINE static void setOutput(bool status) {
				setOutput();
				set(status);
			}

			ALWAYS_INLINE static void
			setOutput(OutputType type = PUSH_PULL) {
				{{ conf_reg }} = type;
				// TODO: only needed for some specific pins: | IOCON_ADMODE_DIGITAL;
				{{ gpio_reg }}->DIR |= (1 << {{ pin}});
			}

			ALWAYS_INLINE static void set() {
				{{ gpio_reg }}->MASKED_ACCESS[1 << {{ pin }}] = (1 << {{pin}});
			}

			ALWAYS_INLINE static void set(bool status) {
				if (status) { set(); }
				else { reset(); }
			}

			ALWAYS_INLINE static void reset() {
				{{ gpio_reg }}->MASKED_ACCESS[1 << {{ pin }}] = 0;
			}

			ALWAYS_INLINE static void toggle() {
				if (({{ gpio_reg }}->MASKED_ACCESS[1 << {{ pin }}]) >> {{ pin }})
				{ reset(); } else { set(); }
			}
	%% endif
	%% if type == "" or type == "Input"
			ALWAYS_INLINE static void
			setInput(InputType type = FLOATING) {
				// Open Drain or not?
				// TODO:
				{{ conf_reg }} = type;
				// TODO: only needed for some specific pins: | IOCON_ADMODE_DIGITAL;
				{{ gpio_reg }}->DIR &= ~(1 << {{ pin}});
			}

			ALWAYS_INLINE static bool read() {
				return ({{ gpio_reg }}->MASKED_ACCESS[1 << {{ pin }}]) >> {{ pin }};
			}
	%% endif
		};
%% endfor
%% endfor
	} /* namespace lpc */
} /* xpcc */

%% endif

#endif // XPCC_LPC__GPIO_HPP
