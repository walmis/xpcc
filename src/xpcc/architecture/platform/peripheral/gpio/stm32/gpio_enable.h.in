// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------
#ifndef XPCC_STM32_GPIO_ENABLE_H
#define XPCC_STM32_GPIO_ENABLE_H

#include "../../../device.hpp"

%% if target is stm32f3
// Define missing from the CMSIS lib
#define  RCC_AHBRSTR_GPIOERST ((uint32_t)(1<<21))
%% endif

static void
xpcc_gpio_enable(void)
{
	// FIXME: add possibility to switch individual clocks on and off
%% if target is stm32f2 or target is stm32f4
%%	set clock_tree = 'AHB1'
%% elif target is stm32f0 or target is stm32f3
%%	set clock_tree = 'AHB'
%% endif

	// Enable GPIO clock
RCC->{{ clock_tree }}ENR  |=
%% for port in gpios|xpcc.values('port')|sort
%%	if not loop.last
	RCC_{{ clock_tree }}ENR_GPIO{{ port }}EN |
%%	else
	RCC_{{ clock_tree }}ENR_GPIO{{ port }}EN;
%%	endif
%% endfor

	// Reset GPIO peripheral
RCC->{{ clock_tree }}RSTR |=
%% for port in gpios|xpcc.values('port')|sort
%%	if not loop.last
	RCC_{{ clock_tree }}RSTR_GPIO{{ port }}RST |
%%	else
	RCC_{{ clock_tree }}RSTR_GPIO{{ port }}RST;
%%	endif
%% endfor

RCC->{{ clock_tree }}RSTR &= ~(
%% for port in gpios|xpcc.values('port')|sort
%%	if not loop.last
	RCC_{{ clock_tree }}RSTR_GPIO{{ port }}RST |
%%	else
	RCC_{{ clock_tree }}RSTR_GPIO{{ port }}RST);
%%	endif
%% endfor
}

#endif // XPCC_STM32_GPIO_ENABLE_H
