// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------
#ifndef XPCC_STM32_GPIO_HPP
#define XPCC_STM32_GPIO_HPP

#include "../../../device.hpp"
#include "../../../type_ids.hpp"
#include <xpcc/architecture/peripheral/gpio.hpp>
#include "gpio_enable.h"

namespace xpcc
{

namespace stm32
{

struct Gpio
{
	/// @ingroup	stm32{{ target.family }}
	enum class
	InputType
	{
		Floating = 0x0,	///< floating on input
		PullUp = 0x1,	///< pull-up on input
		PullDown = 0x2,	///< pull-down on input
	};

	/// @ingroup	stm32{{ target.family }}
	enum class
	OutputType
	{
		PushPull = 0x0,		///< push-pull on output
		OpenDrain = 0x1,	///< open-drain on output
	};

	/// @ingroup	stm32{{ target.family }}
	enum class
	OutputSpeed
	{
		MHz2 = 0,		///< Low speed
		%% if target is stm32f2 or target is stm32f4
		MHz25 = 0x1,	///< Medium speed
		MHz50 = 0x2,	///< Fast speed
		MHz100 = 0x3,	///< High speed on 30 pF (80 MHz Output max speed on 15 pF)
		%% elif target is stm32f0 or target is stm32f3
		MHz10 = 0x1,	///< Medium speed
		MHz50 = 0x3,	///< Fast speed
		%% endif
	};

	enum class
	InputTrigger
	{
		RisingEdge,
		FallingEdge,
		BothEdges,
	};

	enum class
	Port
	{
%% for port in gpios | getPorts
		{{ port.name | upper }},
%% endfor
	};

	/// @ingroup	stm32{{ target.family }}
	static void
	enable()
	{
		xpcc_gpio_enable();
	}

	/// @ingroup	stm32{{ target.family }}
	static void
	disable()
	{
		// FIXME: Implement
	}

protected:
	/// I/O Direction Mode values for this specific pin.
	enum class
	Mode
	{
		Input  = 0x0,
		Output = 0x1,
		AlternateFunction = 0x2,
		Analog = 0x3,
		Mask   = 0x3,
	};

	/// @ingroup	stm32{{ target.family }}
	// 0..7 = AFRL[31:0]
	// 8..15 = AFRH[31:0]
	enum class
	AlternateFunction
	{
		AF_0 = 0x00,		///< System
		AF_1 = 0x01,		///< TIM1/2
		AF_2 = 0x02,		///< TIM3..5
		AF_3 = 0x03,		///< TIM8...11
		AF_4 = 0x04,		///< I2C1..3
		AF_5 = 0x05,		///< SPI1/2
		AF_6 = 0x06,		///< SPI3
		AF_7 = 0x07,		///< USART1..3
		AF_8 = 0x08,		///< USART4..6
		AF_9 = 0x09,		///< CAN1/2, TIM12..14
		AF_10 = 0x0a,		///< OTG_FS, OTG_HS
		AF_11 = 0x0b,		///< ETH
		AF_12 = 0x0c,		///< FSMC, SDIO, OTG_HS (configured as FS)
		AF_13 = 0x0d,		///< DCMI
		AF_14 = 0x0e,		///< Reserved
		AF_15 = 0x0f,		///< EVENTOUT
	};

	/// @private Enum Class To Integer helper functions.
	/// @{
	static constexpr uint32_t
	i(InputType pull) { return static_cast<uint32_t>(pull); }
	static constexpr uint32_t
	i(OutputType out) { return static_cast<uint32_t>(out); }
	static constexpr uint32_t
	i(OutputSpeed speed) { return static_cast<uint32_t>(speed); }
	static constexpr uint32_t
	i(Mode mode) { return static_cast<uint32_t>(mode); }
	static constexpr uint32_t
	i(AlternateFunction af) { return static_cast<uint32_t>(af); }
	/// @}
};

// Gpio Classes created from the XML Device File Gpio Description
%% for gpio in gpios
	%% set reg  = "GPIO" ~ gpio.port|upper
	%% set pin  = gpio.id

	%% for type in ["Output", "Input", ""]
		%% set name = "Gpio" ~ type ~ gpio.port|upper ~ gpio.id
		%% set superclass = "Gpio" ~ (type if type != "" else "IO")

/// {{type if type != "" else "IO"}} class for Pin {{gpio.port|upper ~ pin}}
/// {{gpio.port|upper}}{{gpio.id}} {{type}}
/// @ingroup	stm32
struct {{name}} : public Gpio, ::xpcc::{{superclass}}
{
public:
	/// Port name.
	static constexpr Port port = Port::{{gpio.port|upper}};
	/// Pin Number.
	static constexpr uint8_t pin = {{pin}};
	/// Bitmask for registers that contain a 1bit value for every pin.
	static constexpr uint16_t mask  = 0x1 << pin;
	/// Bitmask for registers that contain a 2bit value for every pin.
	static constexpr uint32_t mask2 = 0x3 << (pin * 2);
private:
	/// Alternate Function register id. 0 for pin 0-7. 1 for pin 8-15.
	static constexpr uint8_t af_id  = pin / 8;
	/// Alternate Function offset. This depends on the af_id.
	static constexpr uint8_t af_offset =
							(af_id == 0) ? (pin * 4) : ((pin - 8) * 4);
	/// Alternate Function register mask.
	static constexpr uint32_t af_mask  = 0xf << af_offset;
	/// ExternalInterruptIRQ
%% if pin|int in range(0,5)
	%% if target is stm32f3 and pin|int == 2
	static constexpr IRQn_Type ExternalInterruptIRQ = EXTI2_TS_IRQn;
	%% else
	static constexpr IRQn_Type ExternalInterruptIRQ = EXTI{{pin}}_IRQn;
	%% endif
%% elif pin|int in range(5,10)
	static constexpr IRQn_Type ExternalInterruptIRQ = EXTI9_5_IRQn;
%% elif pin|int in range(10,16)
	static constexpr IRQn_Type ExternalInterruptIRQ = EXTI15_10_IRQn;
%% endif

	/// TODO: Document
	ALWAYS_INLINE static void
	setAlternateFunction(AlternateFunction alt) {
		{{reg}}->MODER = ({{reg}}->MODER   & ~mask2)
							| (i(Mode::AlternateFunction) << (pin * 2));
		{{reg}}->AFR[af_id] = ({{reg}}->AFR[af_id] & ~af_mask)
								| (i(alt) << af_offset);
	}

	/// Enable Analog Mode which is needed to use this pin as an ADC input.
	ALWAYS_INLINE static void
	setAnalogInput() {
		{{reg}}->MODER |= i(Mode::Analog) << (pin * 2);
	}

public:
	ALWAYS_INLINE static void
	configure(OutputType type,
			  OutputSpeed speed = OutputSpeed::MHz50) {
		{{reg}}->OTYPER  = ({{reg}}->OTYPER  & ~mask)  | (i(type) << pin);
		{{reg}}->OSPEEDR = ({{reg}}->OSPEEDR & ~mask2) | (i(speed) << (pin * 2));
	}
	ALWAYS_INLINE static void configure(InputType type) {
		{{reg}}->PUPDR   = ({{reg}}->PUPDR   & ~mask2) | (i(type)  << (pin * 2));
	}
		%% for af in gpio.afs
			%% if af.type == "analog"
	/// {{name}} connects to {{af.name}} of {{af.peripheral}}
	static const ::xpcc::stm32::{{af.peripheral}}::Channel
	{{af.peripheral}}Channel = ::xpcc::stm32::{{af.peripheral}}::Channel::{{ af.name }};
			%% endif
		%% endfor
		%% if type in ["" , "Output"]
	// GpioOutput
	// start documentation inherited
	ALWAYS_INLINE static void setOutput() {
		{{reg}}->MODER   = ({{reg}}->MODER   & ~mask2) | (i(Mode::Output)<< pin * 2);
	}
	ALWAYS_INLINE static void setOutput(bool status) {
		set(status);
		setOutput();
	}
	ALWAYS_INLINE static void set() {
			%% if target is stm32f2 or target is stm32f4
		{{reg}}->BSRRL = mask;
			%% elif target is stm32f0 or target is stm32f3
		{{reg}}->BSRR = mask;
			%% endif
	}
	ALWAYS_INLINE static void set(bool status) {
		if (status) {
			set();
		} else {
			reset();
		}
	}
	ALWAYS_INLINE static void reset() {
			%% if target is stm32f2 or target is stm32f4
		{{reg}}->BSRRH = mask;
			%% elif target is stm32f0 or target is stm32f3
		{{reg}}->BRR = mask;
			%% endif
	}
	ALWAYS_INLINE static void toggle() {
		if ({{reg}}->ODR & mask) {
			reset();
		} else {
			set();
		}
	}
	// stop documentation inherited
	ALWAYS_INLINE static void
	setOutput(OutputType type,
			  OutputSpeed speed = OutputSpeed::MHz50) {
		configure(type, speed);
		setOutput();
	}
		%% endif
		%% if type in ["", "Input"]
	// GpioInput
	// start documentation inherited
	ALWAYS_INLINE static void
	setInput() {
		{{reg}}->MODER   &= ~mask2;
		// reset output type and speed
		{{reg}}->OTYPER  &= ~mask;
		{{reg}}->OSPEEDR &= ~mask2;
	}
	ALWAYS_INLINE static bool read() {
		return {{reg}}->IDR & mask;
	}
	// end documentation inherited
	ALWAYS_INLINE static void setInput(InputType type) {
		configure(type);
		setInput();
	}
	// External Interrupts
	ALWAYS_INLINE static void
	enableExternalInterrupt()
	{
		// PA[x], x =  0 ..  3 maps to EXTICR[0]
		// PA[x], x =  4 ..  7 maps to EXTICR[1]
		// PA[x], x =  8 .. 11 maps to EXTICR[2]
		// PA[x], x = 12 .. 15 maps to EXTICR[3]
		constexpr uint_fast8_t idx 	= (pin & 0x0f) >> 2;
		constexpr uint16_t mask 	= ((pin & 0xf0) >> 4) << ( (pin & 0x03)  << 2);
%% if target is stm32f1
		// Enable AFIO
		RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
		AFIO->EXTICR[idx] |= mask;
%% elif target is stm32f2 or target is stm32f3 or target is stm32f4
		// Enable SYSCFG
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
		SYSCFG->EXTICR[idx] |= mask;
%% endif
		EXTI->IMR |= mask;
	}
	ALWAYS_INLINE static void
	disableExternalInterrupt()
	{
		EXTI->IMR &= ~mask;
	}
	ALWAYS_INLINE static void
	enableExternalInterruptVector(const uint32_t priority)
	{
		NVIC_SetPriority(ExternalInterruptIRQ, priority);
		NVIC_EnableIRQ(ExternalInterruptIRQ);
	}
	ALWAYS_INLINE static void
	disableExternalInterruptVector()
	{
		NVIC_DisableIRQ(ExternalInterruptIRQ);
	}
	ALWAYS_INLINE static void
	setInputTrigger(const InputTrigger trigger)
	{
		switch (trigger)
		{
		case InputTrigger::RisingEdge:
			EXTI->RTSR |=  (mask);
			EXTI->FTSR &= ~(mask);
			break;
		case InputTrigger::FallingEdge:
			EXTI->RTSR &= ~(mask);
			EXTI->FTSR |=  (mask);
			break;
		case InputTrigger::BothEdges:
			EXTI->RTSR |=  (mask);
			EXTI->FTSR |=  (mask);
			break;
		}
	}
	ALWAYS_INLINE static bool
	getExternalInterruptFlag()
	{
		return (EXTI->PR & mask);
	}
	/**	\brief	Reset the interrupt flag in the interrupt routine. */
	ALWAYS_INLINE static void
	acknowledgeExternalInterruptFlag()
	{
		// Flags are cleared by writing a one to the flag position.
		EXTI->PR |= mask;
	}
		%% endif
	// connect: Hardware Gpio
		%% for af in gpio.afs
			%% set use = not (	(af.type == "in"  and type == "Output") or
								(af.type == "analog" and type == "Output") or
								(af.type == "out" and type == "Input" ))
			%% if use
	/// Connect {{name}} as {{af.name}} to {{af.peripheral}}.
	ALWAYS_INLINE static void
	connect(TypeId::{{ af.peripheral }}{{ af.name }} /* t */) {
				%% if af.type == "analog"
		setAnalogInput();
				%% else
		setAlternateFunction(AlternateFunction::AF_{{ af.id }});
				%% endif
	}
				%% if af.type in ['', 'out'] and type != "Input"
	/// Connect {{name}} as {{af.name}} to {{af.peripheral}}.
	ALWAYS_INLINE static void
	connect(TypeId::{{ af.peripheral }}{{ af.name }} /* t */,
		OutputType type, OutputSpeed speed = OutputSpeed::MHz50) {
		configure(type, speed);
		setAlternateFunction(AlternateFunction::AF_{{ af.id }});
	}
				%% endif
				%% if af.type in ['', 'in'] and type != "Output"
	/// Connect {{name}} as {{af.name}} to {{af.peripheral}}.
	ALWAYS_INLINE static void
	connect(TypeId::{{ af.peripheral }}{{ af.name }} /* t */, InputType type) {
		configure(type);
		setAlternateFunction(AlternateFunction::AF_{{ af.id }});
	}
				%% endif
			%% endif
		%% endfor
	// connect: Software Gpio
		%% if type in ['', 'Output']
			%% for peripheral in   ['SoftwareSpiMasterMosi',
									'SoftwareSpiMasterSck']
	/// Connect to `{{peripheral}}`.
	ALWAYS_INLINE static void
	connect(::xpcc::TypeId::{{ peripheral }}) {
		configure(OutputType::PushPull);
		setOutput();
		set();
	}
			%% endfor
			%% for peripheral in   ['SoftwareI2cMasterSda',
									'SoftwareI2cMasterScl']
	/// Connect to `{{peripheral}}`.
	ALWAYS_INLINE static void
	connect(::xpcc::TypeId::{{ peripheral }}) {
		configure(OutputType::OpenDrain);
		setOutput();
		set();
	}
			%% endfor
		%% endif
		%% if type in ['', 'Input']
			%% for peripheral in ['SoftwareSpiMasterMiso']
	/// Connect to `{{peripheral}}`.
	ALWAYS_INLINE static void
	connect(::xpcc::TypeId::{{ peripheral }}) {
		configure(InputType::Floating);
		setInput();
	}
			%% endfor
		%% endif
};

	%% endfor
%% endfor

%# Ports
/// @private
template< Gpio::Port Port, uint8_t StartPin, uint8_t Width>
class GpioPortBase;

/**
 * Creates a hardware port with StartPin as LSB and with Width.
 *
 * @tparam	StartPin	a Gpio pin
 * @tparam	Width		required width of the port (up to 16)
 * @ingroup stm32
 */
template< typename StartPin, uint8_t Width >
class GpioPort : public ::xpcc::GpioPort, public GpioPortBase< StartPin::port, StartPin::pin, Width>
{};

%% for port in gpios | getPorts
/// @private
template< uint8_t StartPin, uint8_t Width >
class GpioPortBase<Gpio::Port::{{port.name}}, StartPin, Width> : public Gpio
{
	static_assert(StartPin < {{port.startPin + port.width}},
			"StartPin too large, maximum {{port.startPin + port.width}}.");
	static_assert(Width <= {{port.width}},
			"Width too large, maximum {{port.width}}.");
	static_assert(Width > 0,
			"Width should be at least 1.");
	static_assert(StartPin + Width <= {{port.startPin + port.width}},
			"StartPin + Width too large, maximum {{port.startPin + port.width}}.");
	
	static constexpr uint16_t dataMask = (1 << Width) - 1;
	static constexpr uint16_t portMask = dataMask << StartPin;
	static constexpr uint32_t portMask2 = portMask | (portMask << Width);
	static constexpr uint32_t port01 = 0x55555555 & portMask2;
	static constexpr uint32_t port10 = 0xAAAAAAAA & portMask2;

public:
	static constexpr uint8_t width = Width;
	
public:
	ALWAYS_INLINE static void setOutput() {
		GPIO{{port.name}}->MODER = (GPIO{{port.name}}->MODER & ~portMask2) | port01;
	}
	ALWAYS_INLINE static void setInput() {
		GPIO{{port.name}}->MODER &= ~portMask2;
	}
	ALWAYS_INLINE static void
	configure(OutputType type,
			  OutputSpeed speed = OutputSpeed::MHz50)
	{
		if (type == OutputType::OpenDrain) {
			GPIO{{port.name}}->OTYPER |= portMask;
		} else {
			GPIO{{port.name}}->OTYPER &= ~portMask;
		}
		GPIO{{port.name}}->OSPEEDR &= ~portMask2;
		if (i(speed) == 0x01) {
			GPIO{{port.name}}->OSPEEDR |= port01;
		} else if (i(speed) == 0x10) {
			GPIO{{port.name}}->OSPEEDR |= port10;
		} else if (i(speed) == 0x11) {
			GPIO{{port.name}}->OSPEEDR |= portMask2;
		}
	}
	ALWAYS_INLINE static void configure(InputType type)
	{
		GPIO{{port.name}}->PUPDR &= ~portMask2;
		if (i(type) == 0x01) {
			GPIO{{port.name}}->PUPDR |= port01;
		} else if (i(type) == 0x10) {
			GPIO{{port.name}}->PUPDR |= port10;
		}
	}
	ALWAYS_INLINE static uint16_t read() {
		uint16_t data = GPIO{{port.name}}->IDR & portMask;
		return (data >> StartPin);
	}
	ALWAYS_INLINE static void write(uint16_t data) {
		data <<= StartPin;
		GPIO{{port.name}}->ODR = (GPIO{{port.name}}->ODR & ~portMask) | data;
	}
};

%% endfor

} // namespace stm32

} // namespace xpcc

#endif // XPCC_STM32_GPIO_HPP
