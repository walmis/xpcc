// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------
{{ generation_block }}

#ifndef XPCC_ATXMEGA_I2C_MASTER_{{ id }}_HPP
#define XPCC_ATXMEGA_I2C_MASTER_{{ id }}_HPP

#include "../../../device.hpp"
#include <xpcc/architecture/peripheral/i2c.hpp>
#include "type_ids.hpp"

namespace xpcc
{

namespace xmega
{

/**
 * Asynchronous I2C master module for Port {{ id }}.
 *
 * Interrupts must be enabled.
 * 
 * @author Niklas Hauser
 * @ingroup	xmega
 */
class I2cMaster{{ id }} : ::xpcc::I2cMaster
{
public:
	static const TypeId::I2cMaster{{ id }}Sda Sda;
	static const TypeId::I2cMaster{{ id }}Scl Scl;

public:
	/**
	 * Set up the I2C module for master operation.
	 *
	 * @param	rate
	 *		`Standard` or `Fast`, `High` datarate is not supported by the Xmega
	 */
	template<DataRate rate=DataRate::Standard>
	static ALWAYS_INLINE void
	initialize()
	{
		constexpr uint32_t rawRate = static_cast<uint32_t>(rate);
		static_assert(rawRate <= 400000, "The Xmega does not support High I2C baudrate.");
		static_assert(F_CPU/10 >= rawRate, "The CPU frequency needs to be at least 10x higher than I2C baudrate.");

		// set the baud rate register
		constexpr uint8_t baud = (F_CPU / (2 * rawRate)) - 5;
		initializeWithBaud(baud);
	}

	// start documentation inherited
	static bool
	start(xpcc::I2cDelegate *delegate);

	static bool
	startBlocking(xpcc::I2cDelegate *delegate);

	static Error
	getErrorState();

	static void
	reset(DetachCause cause=DetachCause::SoftwareReset);
	// end documentation inherited

private:
	static void
	initializeWithBaud(uint8_t baud);
};

} // namespace xmega

} // namespace xpcc

#endif // XPCC_ATXMEGA_I2C_MASTER_{{ id }}_HPP
