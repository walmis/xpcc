// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------
{{ generation_block }}

#include <xpcc/architecture/driver/atomic/lock.hpp>
#include "i2c_master_{{ id.lower() }}.hpp"

// uncomment to debug your driver using simple uart
/*
#include "../uart.hpp"
#define DEBUG(x) xpcc::xmega::UartF0::write(x)
/*/
#define DEBUG(x)
//*/

// ----------------------------------------------------------------------------
namespace
{
	// parameter advice
	static xpcc::I2c::Operation nextOperation;
	
	// buffer management
	static uint8_t *readPointer;
	static const uint8_t *writePointer;
	static std::size_t readBytesLeft;
	static std::size_t writeBytesLeft;
	
	// delegating
	static xpcc::I2cDelegate *delegate = 0;
	static xpcc::I2cMaster::Error errorState(xpcc::I2cMaster::Error::NoError);
	
	// helper functions
	static ALWAYS_INLINE void
	initializeWrite(xpcc::I2cDelegate::Writing w) {
		writePointer = w.buffer;
		writeBytesLeft = w.size;
		nextOperation = static_cast<xpcc::I2c::Operation>(w.next);
	}
	
	static ALWAYS_INLINE void
	initializeRead(xpcc::I2cDelegate::Reading r) {
		readPointer = r.buffer;
		readBytesLeft = r.size;
		nextOperation = static_cast<xpcc::I2c::Operation>(r.next);
	}
	
	static ALWAYS_INLINE void
	initializeStopAfterAddress() {
		//writePointer = ..;
		writeBytesLeft = 0;
		nextOperation = xpcc::I2c::Operation::Stop;
	}
	
	static ALWAYS_INLINE void
	initializeRestartAfterAddress() {
		//writePointer = ..;
		writeBytesLeft = 0;
		nextOperation = xpcc::I2c::Operation::Restart;
	}
	
	static void
	callStarting()
	{
		DEBUG('s');
		writeBytesLeft = 0;
		readBytesLeft = 0;
		TWI{{ id }}_MASTER_CTRLA &= ~(TWI_MASTER_RIEN_bm | TWI_MASTER_WIEN_bm);
		xpcc::I2cDelegate::Starting s = delegate->starting();
		uint8_t address;
		switch (s.next)
		{
			case xpcc::I2c::Operation::Read:
				address = (s.address & 0xfe) | xpcc::I2c::READ;
				initializeRead(delegate->reading());
				break;
				
			case xpcc::I2c::Operation::Write:
				address = (s.address & 0xfe) | xpcc::I2c::WRITE;
				initializeWrite(delegate->writing());
				break;
				
			default:
			case xpcc::I2c::Operation::Stop:
				address = (s.address & 0xfe) | xpcc::I2c::WRITE;
				initializeStopAfterAddress();
				break;
				
			case xpcc::I2c::Operation::Restart:
				address = (s.address & 0xfe) | xpcc::I2c::WRITE;
				initializeRestartAfterAddress();
				break;
		}
		// This also generates a start condition
		TWI{{ id }}_MASTER_ADDR = address;
		TWI{{ id }}_MASTER_CTRLA |= (address & xpcc::I2c::READ) ? TWI_MASTER_RIEN_bm : TWI_MASTER_WIEN_bm;
	}
}

// ----------------------------------------------------------------------------
/// TWI state machine interrupt handler
ISR(TWI{{ id }}_TWIM_vect)
{
	switch(TWI{{ id }}_MASTER_STATUS & TWI_MASTER_BUSSTATE_gm)
	{
		case TWI_MASTER_BUSSTATE_IDLE_gc:
			// Stop condition has been sent
			// chillax and get some coffee
			DEBUG('i');
			break;
			
		case TWI_MASTER_BUSSTATE_OWNER_gc:
			// We are writing
			if (TWI{{ id }}_MASTER_STATUS & TWI_MASTER_WIF_bm)
			{
				// Abitration and Bus Error is handled by the Busy state.
				
				// The Received Acknowledge flag must be checked for each data packet
				// transmitted before the next data packet can be transferred. The master
				// is not allowed to continue transmitting data if the slave signals a NACK.
				// 1 = NACK, 0 = ACK !!!
				if (TWI{{ id }}_MASTER_STATUS & TWI_MASTER_RXACK_bm)
				{
					DEBUG('N');
					errorState = xpcc::I2cMaster::Error::DataNack;
					TWI{{ id }}_MASTER_CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
					xpcc::xmega::I2cMaster{{ id }}::reset(xpcc::I2c::DetachCause::ErrorCondition);
					// (M2)
					TWI{{ id }}_MASTER_STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
					break;
				}
				
				// Data byte has been transmitted and ACK received
				if (writeBytesLeft != 0)
				{
					// Writing the DATA register will trigger a data byte transfer, followed by
					// the master receiving the acknowledge bit from the slave.
					// The WIF and the CLKHOLD flag are set.
					// Accessing the DATA register will clear the master interrupt flags
					// and the CLKHOLD flag.
					TWI{{ id }}_MASTER_DATA = *writePointer++;
					//DEBUG('0' + writeBytesLeft);
					--writeBytesLeft;
					DEBUG('A');
				}
				else
				{
					switch (nextOperation)
					{
						case xpcc::I2c::Operation::Write:
							DEBUG('C');
							initializeWrite(delegate->writing());
							TWI{{ id }}_MASTER_DATA = *writePointer++;
							--writeBytesLeft;
							DEBUG('A');
							break;
							
						case xpcc::I2c::Operation::Restart:
							DEBUG('R');
							TWI{{ id }}_MASTER_CTRLC = TWI_MASTER_CMD_REPSTART_gc;
							callStarting();
							break;
							
						default:
							DEBUG('S');
							TWI{{ id }}_MASTER_CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
							delegate->stopped(xpcc::I2c::DetachCause::NormalStop);
							delegate = 0;
							break;
					}
				}
			}
			// We are reading
			else if (TWI{{ id }}_MASTER_STATUS & TWI_MASTER_RIF_bm)
			{
				// Accessing the DATA register will clear the master interrupt flags
				// and the CLKHOLD flag.
				*readPointer++ = TWI{{ id }}_MASTER_DATA;
				//DEBUG('0' + readBytesLeft);
				--readBytesLeft;
				
				// Indicating a NACK might not be successfully executed since arbitration
				// can be lost during the transmission.
				if (readBytesLeft > 0) {
					DEBUG('a');
					// Send ACK after reception
					TWI{{ id }}_MASTER_CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
				}
				else {
					DEBUG('n');
					switch (nextOperation)
					{
						case xpcc::I2c::Operation::Restart:
							DEBUG('r');
							TWI{{ id }}_MASTER_CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_REPSTART_gc;
							callStarting();
							break;
							
						default:
						case xpcc::I2c::Operation::Stop:
							DEBUG('S');
							TWI{{ id }}_MASTER_CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
							delegate->stopped(xpcc::I2c::DetachCause::NormalStop);
							delegate = 0;
							break;
					}
				}
			}
			break;
			
		case TWI_MASTER_BUSSTATE_BUSY_gc:
			// Arbitration Lost, or other master is using the bus
			// wait until bus status returns to IDLE
			// cancel all pending messages
			DEBUG('E');
			
			errorState = xpcc::I2cMaster::Error::ArbitrationLost;
			xpcc::xmega::I2cMaster{{ id }}::reset(xpcc::I2c::DetachCause::ErrorCondition);
			
		default:
			TWI{{ id }}_MASTER_STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
			break;
	}
	DEBUG('\n');
}

// ----------------------------------------------------------------------------
void
xpcc::xmega::I2cMaster{{ id }}::initializeWithBaud(uint8_t baud)
{
	reset(xpcc::I2c::DetachCause::SoftwareReset);
	
//	Sda::setInput();
//	Scl::setOutput();
	
	// SDA Hold Time and External Driver Interface disabled
	TWI{{ id }}_CTRL = 0;
	
	TWI{{ id }}_MASTER_BAUD = baud;
	
	// Enable the Master, and the interrupts
	TWI{{ id }}_MASTER_CTRLA = TWI_MASTER_INTLVL_MED_gc | TWI_MASTER_ENABLE_bm;
	// clear register b
	TWI{{ id }}_MASTER_CTRLB = 0;
	// clear register c
	TWI{{ id }}_MASTER_CTRLC = 0;
	
	// Set the bus state to idle
	TWI{{ id }}_MASTER_STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void
xpcc::xmega::I2cMaster{{ id }}::reset(DetachCause cause)
{
	DEBUG('T');
	writeBytesLeft = 0;
	readBytesLeft = 0;
	if (delegate) delegate->stopped(cause);
	delegate = 0;
}

xpcc::I2cMaster::Error
xpcc::xmega::I2cMaster{{ id }}::getErrorState()
{
	return errorState;
}

bool
xpcc::xmega::I2cMaster{{ id }}::start(xpcc::I2cDelegate *delegate)
{
	if (!::delegate && delegate && delegate->attaching())
	{
		::delegate = delegate;
		callStarting();
		
		return true;
	}
	return false;
}

bool
xpcc::xmega::I2cMaster{{ id }}::startBlocking(xpcc::I2cDelegate *delegate)
{
	if (!::delegate && delegate && delegate->attaching())
	{
		::delegate = delegate;
		callStarting();
		
		while (::delegate)
			;
		
		return true;
	}
	return false;
}
