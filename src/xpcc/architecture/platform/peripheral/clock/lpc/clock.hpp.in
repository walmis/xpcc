// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_LPC__CLOCK_HPP
#define XPCC_LPC__CLOCK_HPP

#include <stdint.h>
#include "../common/common_clock.hpp"
#include "../../../device.hpp"
// #include "static.hpp"

using namespace xpcc::clock;

namespace xpcc
{
	namespace lpc
	{
		/**
		 * Clock management
		 *
		 * \ingroup
		 */
		class ClockTree
		{
		public:
			enum class ClockSource
			{
				InternalClock,		/* IRC Oscillator (12MHz) */
				ExternalClock,		/* System Oscillator */
				ExternalCrystal,
			};

			enum class PllSource
			{
				IRC = 0,
				SystemOscillator = 1,
				InternalClock = IRC,
				ExternalClock = SystemOscillator,
				ExternalCrystal = SystemOscillator,
			};

			enum class SystemClockSource : uint32_t
			{
				IRC = 0x0,
				SystemPllInput = 0x1,
				WatchdogOscillator = 0x2,
				SystemPllOutput = 0x3,
				InternalClock = IRC,
				ExternalClock = SystemPllInput, // FIXME: not quite hitting it
				ExternalCrystal = ExternalClock,
				Pll = SystemPllOutput,
			};

			enum class ClockOutSource : uint32_t
			{
				IRC = 0x0,
				SystemOscillator = 0x1,
				WatchdogOscillator = 0x2,
				MainClock = 0x3,
				InternalClock = IRC,
				ExternalClock = SystemOscillator,
				ExternalCrystal = SystemOscillator,
				SystemClock = MainClock,
			};

		public:
			static bool
			enableSource(ClockSource src, uint32_t kHz, uint32_t waitCycles = 1500);

			/**
			 * Enable PLL.
			 *
			 * \param	source
			 * 		Source select for PLL
			 *
			 * \param	pllM
			 * 		???
			 *
			 * \param	pllP
			 * 		???
			 *
			 * Example:
			 *
			 */
			static void
			enablePll(PllSource source, uint8_t pllM, uint8_t pllP);

			static bool
			switchSystemClockTo(SystemClockSource src, uint32_t waitCycles = 1500);

			static void
			connectToClockOut(ClockOutSource src)
			{
				LPC_SYSCON->CLKOUTCLKSEL = 0x3 & static_cast<uint32_t>(src);
				LPC_SYSCON->CLKOUTUEN = 0x01;	// toggle update enable register
				LPC_SYSCON->CLKOUTUEN = 0x00;
				LPC_SYSCON->CLKOUTUEN = 0x01;
				while (!(LPC_SYSCON->CLKOUTUEN & 0x01));
			}

			static void
			setClockOutDivision(int div)
			{
				LPC_SYSCON->CLKOUTDIV = 0xff & static_cast<uint8_t>(div);
			}

		};
	}
}

#endif	//  XPCC_LPC__CLOCK_HPP
