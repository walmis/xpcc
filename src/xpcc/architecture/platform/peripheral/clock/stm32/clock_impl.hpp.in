// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

#include "../../../device.hpp"
#include "clock.hpp"

// ----------------------------------------------------------------------------
bool
xpcc::stm32::ClockTree::enableSource(ClockSource src, uint32_t kHz, uint32_t waitCycles)
{
	(void)(kHz);

	if (src == ClockSource::InternalClock)
		return true;	// InternalClock is always on
	if (src == ClockSource::ExternalClock) {
		RCC->CR |= RCC_CR_HSEBYP | RCC_CR_HSEON;
		// return if already running
		if(RCC->CR & (RCC_CR_HSEBYP | RCC_CR_HSEON) && (RCC->CR & RCC_CR_HSERDY))
			return true;
	}
	else if(src == ClockSource::ExternalCrystal) {
		RCC->CR |= RCC_CR_HSEON;
		// return if already running
		if(RCC->CR & (RCC_CR_HSEON) && (RCC->CR & RCC_CR_HSERDY))
			return true;
	}
	else {
		return false;	// should not get here
	}

	uint32_t t = waitCycles;
	while (!(RCC->CR & RCC_CR_HSERDY) && --t) {
	}

	return (RCC->CR & RCC_CR_HSERDY);
}

%% if target is stm32f2 or target is stm32f4
// ----------------------------------------------------------------------------
void
xpcc::stm32::ClockTree::enablePll(PllSource source, uint8_t pllM,
	uint16_t pllN, uint8_t pllP, uint8_t pllQ)
{
	uint32_t tmp = 0;


	// Read reserved values and clear all other values
	tmp = RCC->PLLCFGR & ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM
			| RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLQ);

	// PLLSRC source for pll and for plli2s
	tmp |= static_cast<uint32_t>(source);

	// PLLM (0) = factor is user defined VCO input frequency must be configured to 2MHz
	tmp |= ((uint32_t) pllM) & RCC_PLLCFGR_PLLM;

	// PLLN (6) = factor is user defined
	tmp |= (((uint32_t) pllN) << 6) & RCC_PLLCFGR_PLLN;

	// PLLP (16) divider for CPU frequency; (00: PLLP = 2, 01: PLLP = 4, etc.)
	tmp |= (((uint32_t) (pllP / 2) - 1) << 16) & RCC_PLLCFGR_PLLP;

	// PLLQ (24) divider for USB frequency; (0-15)
	tmp |= (((uint32_t) pllQ) << 24) & RCC_PLLCFGR_PLLQ;

	RCC->PLLCFGR = tmp;

	// enable pll
	RCC->CR |= RCC_CR_PLLON;
}
%% elif target is stm32f3
// ----------------------------------------------------------------------------
void
xpcc::stm32::ClockTree::enablePll(PllSource source, UsbPrescaler usb,
			uint8_t pllMul, uint8_t pllPrediv)
{
	uint32_t tmp = 0;

	// Read reserved values and clear all other values
	tmp = RCC->CFGR & ~(RCC_CFGR_USBPRE | RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);

	// PLLSRC source for pll
	tmp |= static_cast<uint32_t>(source);

	// Divide Output for USB Clock by 1.5?
	tmp |= static_cast<uint32_t>(usb);

	// Pll multiplication factor
	tmp |= (static_cast<uint32_t>(pllMul - 2) << 18) & RCC_CFGR_PLLMULL;

	RCC->CFGR = tmp;

	// HSE PREDIV division factor
	RCC->CFGR2 = (RCC->CFGR2 & ~(RCC_CFGR2_PREDIV1)) |
					(static_cast<uint32_t>(pllPrediv - 1) & RCC_CFGR2_PREDIV1);

	// enable pll
	RCC->CR |= RCC_CR_PLLON;
}
%%endif

// ----------------------------------------------------------------------------
bool
xpcc::stm32::ClockTree::switchSystemClockTo(SystemClockSource src, uint32_t waitCycles)
{
	uint32_t t = waitCycles;
	while (!(RCC->CR & RCC_CR_PLLRDY)) {
		if (!(--t)) {
			return false;
		}
	}

%% if target is stm32f4
	// APB2 84MHz, APB1 42MHz, AHB 168MHz, select PLL as source
%% elif target is stm32f2
	// APB2 60MHz, APB1 30MHz, AHB 120MHz, select PLL as source
%% endif

	RCC->CFGR =
			(RCC->CFGR & 0xffff0000) | // Try to generate a halfword write
			((
%% if target is stm32f2 or target is stm32f4
			RCC_CFGR_PPRE1_DIV4 |
			RCC_CFGR_PPRE2_DIV2 |
%% elif target is stm32f3
			RCC_CFGR_PPRE1_DIV2 | /* APB1   = 72 / 2 = 36 MHz */
			RCC_CFGR_PPRE2_DIV1 | /* APB2   = 72 / 1 = 72 MHz */
%% endif
			RCC_CFGR_HPRE_DIV1  |
			static_cast<uint32_t>(src)
			) & 0x0000ffff);

	// Wait till the main PLL is used as system clock source
	while ((RCC->CFGR & (uint32_t) RCC_CFGR_SWS) != (static_cast<uint32_t>(src) << 2));

	return true;
}
