// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

%%	import '../common/static.macros' as static with context

#ifndef XPCC_STM32__STATIC_HPP
#define XPCC_STM32__STATIC_HPP

#include <stdint.h>		// uint32_t
#include "../../../device.hpp"
#include "../../../type_ids.hpp"
#include "../common/common_clock.hpp"
#include "pll_calculator.hpp"
#include "clock.hpp"

using namespace xpcc::clock;

namespace xpcc
{
	namespace stm32
	{

%% if target is stm32f2 or target is stm32f4
		/*
		 * Used to setup pll with constants
		 */
		template<int InputFrequency, int OutputFrequency, int UsbFrequency,
		ClockTree::PllSource Source>
		class PllSetup
		{
		private:
%% if target is stm32f2
			typedef Stm32F2F4PllSettings<MHz64,  InputFrequency, OutputFrequency, UsbFrequency> p;
%% elif target is stm32f4
			typedef Stm32F2F4PllSettings<MHz192, InputFrequency, OutputFrequency, UsbFrequency> p;
%% endif
		public:
			static StartupError
			enable()
			{
				ClockTree::enablePll(Source, p::PllM, p::PllN, p::PllP, p::PllQ);
				return StartupError::None;
			}
		};
%% elif target is stm32f3
		/*
		 * Used to setup pll with constants
		 */
		template<int InputFrequency, int OutputFrequency,
		ClockTree::PllSource Source>
		class PllSetup
		{
		private:
			typedef Stm32F3PllSettings<InputFrequency, OutputFrequency,
									(Source == ClockTree::PllSource::Hsi)> p;
		public:
			static StartupError
			enable()
			{
				constexpr ClockTree::UsbPrescaler usb =
							(p::CanUseUSB && (OutputFrequency == MHz72))?
							ClockTree::UsbPrescaler::DivideBy1Point5 :
							ClockTree::UsbPrescaler::DoNotDivide;
				ClockTree::enablePll(Source, usb, p::PllMul, p::PllPrediv);
				return StartupError::None;
			}
		};
%% endif

%#------------ Inputs ---------------------------------------------------------
%% set internalClock =		{'name': "InternalClock",
							 'fixedFrequency': "MHz8" }
%% set externallClock =		{'name': "ExternalClock",
							 'minFrequency': "MHz4",
							 'maxFrequency': "MHz32" }
%% set externalCrystal =	{'name': "ExternalCrystal",
							 'minFrequency': "MHz4",
							 'maxFrequency': "MHz32" }
%% if target is stm32f2 or target is stm32f4
	%% set sys_timer = 	{'name': "SystemTimer",
					 'prescaler': "1/8" }
	%% set apb1_timers = 	{'name': "APB1Timers",
							 'prescaler': "2" ,
							 'sinks': [ "Timer2",  "Timer3",  "Timer4",
										"Timer5",  "Timer6",  "Timer7",
										"Timer12", "Timer13", "Timer14" ] }
	%% set apb1 = 	{'name': "APB1",
					 'prescaler': "1/4",
					 'sinks': [ apb1_timers, "Dac", "Can1", "Can2",
								"I2c1", "I2c2", "I2c3", "Spi2", "Spi3",
								"Usart2", "Usart3", "Uart4", "Uart5" ] }
	%% set apb2_timers = 	{'name': "APB2Timers",
							 'prescaler': 2,
							 'sinks': [ "Timer1",  "Timer8",  "Timer9",
										"Timer10", "Timer11" ] }
	%% set apb2 = 	{'name': "APB2",
					 'prescaler': "1/2",
					 'sinks': [ apb2_timers, "Spi1", "Sdio", "Adc",
								"Usart1", "Usart6" ] }
	%% set ahb1 = 	{'name': "AHB",
					 'prescaler': "1",
					 'sinks': [ sys_timer, apb1, apb2, "Dma", "Gpio" ] }
	%% set ahb3 = 	{'name': "AHB3",
					 'prescaler': "1",
					 'sinks': [ "Fsmc" ] }
	%% set pll =			{'name': "Pll",
							 'setup': "PllSetup",
							 'frequencies': ["UsbFrequency"],
							 'sources': [internalClock,
										externallClock, externalCrystal] }
	%% set systemClock =	{'name': "SystemClock",
							 'minFrequency': "MHz8",
							 'maxFrequency': "MHz168",
							 'sources': [ internalClock, externallClock,
										  externalCrystal, pll ],
							 'sinks': [ ahb1, ahb3 ] }
	%% set mco1 =			{'name': "MCO1",
							 'divisions': [1, 2, 3, 4, 5],
							 'sources': [internalClock, externallClock,
										 externalCrystal, pll] }
							%# TODO: Add more sources
	%% set mco2 =			{'name': "MCO2",
							 'divisions': [1, 2, 3, 4, 5],
							 'sources': [systemClock, externallClock,
										 externalCrystal, pll] }
							%# TODO: Add more sources
%% elif target is stm32f3
	%% set sys_timer = 	{'name': "SystemTimer",
					 'prescaler': "1/8" }
	%% set apb1 = 	{'name': "APB1",
					 'prescaler': "1/2",
					 'sinks': [ "Can", "I2c1", "I2c2",
								"Usart2", "Usart3", "Uart4", "Uart5",
								"Spi2", "Spi3",
								"Timer2", "Timer3", "Timer4", "Timer6", "Timer7" ] }
	%% set apb2 = 	{'name': "APB2",
					 'prescaler': "1",
					 'sinks': [ "Usart1", "Spi1",
								"Timer1", "Timer8", "Timer15", "Timer16" ] }
	%% set ahb = 	{'name': "AHB",
					 'prescaler': "1",
					 'sinks': [ sys_timer, apb1, apb2, "Adc", "Gpio", "Dma" ] }
					%#	 Note: Adc has its own prescaler
	%% set pll =			{'name': "Pll",
							 'setup': "PllSetup",
							 'sources': [internalClock,
										externallClock, externalCrystal] }
	%% set systemClock =	{'name': "SystemClock",
							 'minFrequency': "MHz16",
							 'maxFrequency': "MHz72",
							 'sources': [ internalClock, externallClock,
										  externalCrystal, pll ],
							 'sinks': [ ahb ] }
	%% set mco1 =			{'name': "MCO",
							 'divisions': [1, 2, 3, 4, 5],
							 'sources': [internalClock, externallClock,
										 externalCrystal, pll, systemClock] }
%% endif


	// Static Clocks/Plls/Osciallators
{{ static.source(internalClock, "xpcc::stm32") }}

{{ static.source(externallClock, "xpcc::stm32") }}

{{ static.source(externalCrystal, "xpcc::stm32") }}

{{ static.pll(pll, "xpcc::stm32") }}

{{ static.sink(systemClock, "xpcc::stm32")}}

{{ static.output(mco1, "xpcc::stm32")}}

%% if target is stm32f2 or target is stm32f4
{{ static.output(mco2, "xpcc::stm32")}}
%% endif
	}
}

#endif	//  XPCC_STM32__STATIC_HPP
