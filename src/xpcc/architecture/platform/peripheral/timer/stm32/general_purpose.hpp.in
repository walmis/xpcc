// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32_TIMER_{{ id }}_HPP
#define XPCC_STM32_TIMER_{{ id }}_HPP

#include "../../../type_ids.hpp"
#include "general_purpose_base.hpp"

namespace xpcc
{
namespace stm32
{
/**
 * @brief		General Purpose Timer {{ id }}
 * 
 * Interrupt handler:
 * \code
 * extern "C" void
 * TIM{{ id }}_IRQHandler(void)
 * {
 *     Timer{{ id }}::resetInterruptFlags(Timer{{ id }}::...);
 *     
 *     ...
 * }
 * \endcode
 * 
 * \warning	The Timer has much more possibilities than presented by this
 * 			interface (e.g. Input Capture, Trigger for other Timers, DMA).
 * 			It might be expanded in the future.
 * 
 * @author		Fabian Greif
 * @ingroup		stm32
 */
class Timer{{ id }} : public GeneralPurposeTimer
{
public:

%% set connectors = []
%% import 'connectors.macros' as cons with context
%% for c in connectors
	/// TypeId used to connect GPIO pins to this peripheral's {{ c }}.
	static const TypeId::Timer{{ id ~ c}} {{ c }};
%% endfor

public:

	enum class MasterMode : uint32_t
	{
		Reset 			= 0,							// 0b000
		Enable 			= TIM_CR2_MMS_0,				// 0b001
		Update 			= TIM_CR2_MMS_1,				// 0b010
		Pulse 			= TIM_CR2_MMS_1 | TIM_CR2_MMS_0,// 0b011
		CompareOc1Ref 	= TIM_CR2_MMS_2,				// 0b100
		CompareOc2Ref 	= TIM_CR2_MMS_2 | TIM_CR2_MMS_0,// 0b101
	%% if id >= 2 and id < 5
		// Only available on TIM2/3/4
		CompareOc3Ref 	= TIM_CR2_MMS_2 | TIM_CR2_MMS_1,// 0b110
		CompareOc4Ref 	= TIM_CR2_MMS_2 | TIM_CR2_MMS_1	// 0b111
										| TIM_CR2_MMS_0,
	%% endif
	};

	enum class SlaveModeTrigger : uint32_t
	{
	%% if id < 2 or id > 5
		Internal0 = 0,
	%% endif
		Internal1 = TIM_SMCR_TS_0,
		Internal2 = TIM_SMCR_TS_1,
	%% if (id < 2 or id > 5) and id != 9 and id != 12
		Internal3 = TIM_SMCR_TS_1 | TIM_SMCR_TS_0,
	%% endif
		TimerInput1EdgeDetector = TIM_SMCR_TS_2,
		TimerInput1Filtered = TIM_SMCR_TS_2 | TIM_SMCR_TS_0,
		TimerInput2Filtered = TIM_SMCR_TS_2 | TIM_SMCR_TS_1,
	%% if id != 9 and id != 12
		External = TIM_SMCR_TS_2 | TIM_SMCR_TS_1 | TIM_SMCR_TS_0,
	%% endif
	};

	enum class SlaveMode : uint32_t
	{
		/// Slave mode disabled - if CEN = '1' then the prescaler is clocked directly by the internal clock.
		Disabled	= 0,
	%% if id != 9 and id != 12
		/// Counter counts up/down on TI2FP2 edge depending on TI1FP1 level.
		Encoder1	= TIM_SMCR_SMS_0,
		/// Counter counts up/down on TI1FP1 edge depending on TI2FP2 level.
		Encoder2	= TIM_SMCR_SMS_1,
		/// Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input.
		Encoder3	= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0,
	%% endif
		/// Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers.
		Reset		= TIM_SMCR_SMS_2,
		/// The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled.
		Gated		= TIM_SMCR_SMS_2 | TIM_SMCR_SMS_0,
		/// The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled.
		Trigger	= TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1,
		/// Rising edges of the selected trigger (TRGI) clock the counter.
		ExternalClock = TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0,
	%% if target is stm32f3 and (id >= 2 and id <= 4)
		/// reinitialize and start counter
		SLAVE_RESET_TRIGGER	= TIM_SMCR_SMS_3,
	%% endif
	};

	// This type is the internal size of the counter.
	// Timer 2 and 5 are the only one which have the size of 32 bit and
	// only on st32f2 and st32f4
%% if id in [2, 5] and (target is stm32f2 or target is stm32f3 or target is stm32f4)
	typedef uint32_t Value;
%% else
	typedef uint16_t Value;
%% endif

	static void
	enable();

	static void
	disable();

	static inline void
	pause()
	{
		TIM{{ id }}->CR1 &= ~TIM_CR1_CEN;
	}

	static inline void
	start()
	{
		TIM{{ id }}->CR1 |= TIM_CR1_CEN;
	}

	static void
	setMode(Mode mode, SlaveMode slaveMode = SlaveMode::Disabled,
			SlaveModeTrigger slaveModeTrigger = static_cast<SlaveModeTrigger>(0),
			MasterMode masterMode = MasterMode::Reset,
			bool enableOnePulseMode = false);

	static inline void
	setPrescaler(uint16_t prescaler)
	{
		// Because a prescaler of zero is not possible the actual
		// prescaler value is \p prescaler - 1 (see Datasheet)
		TIM{{ id }}->PSC = prescaler - 1;
	}

	static inline void
	setOverflow(Value overflow)
	{
		TIM{{ id }}->ARR = overflow;
	}

	template<class clockSource>
	static Value
	setPeriod(uint32_t microseconds, bool autoApply = true)
	{
		// This will be inaccurate for non-smooth frequencies (last six digits
		// unequal to zero)
		uint32_t cycles = microseconds * (clockSource::Timer{{ id }} / 1000000UL);
		uint16_t prescaler = (cycles + 65535) / 65536;	// always round up
		Value overflow = cycles / prescaler;

		overflow = overflow - 1;	// e.g. 36000 cycles are from 0 to 35999

		setPrescaler(prescaler);
		setOverflow(overflow);

		if (autoApply) {
			// Generate Update Event to apply the new settings for ARR
			TIM{{ id }}->EGR |= TIM_EGR_UG;
		}

		return overflow;
	}

	static inline void
	applyAndReset()
	{
		// Generate Update Event to apply the new settings for ARR
		TIM{{ id }}->EGR |= TIM_EGR_UG;
	}

	static inline Value
	getValue()
	{
		return TIM{{ id }}->CNT;
	}

	static inline void
	setValue(Value value)
	{
		TIM{{ id }}->CNT = value;
	}

public:
	static void
	configureInputChannel(uint32_t channel, InputCaptureMapping input,
			InputCapturePrescaler prescaler,
			InputCapturePolarity polarity, uint8_t filter,
			bool xor_ch1_3=false);

	static void
	configureOutputChannel(uint32_t channel, OutputCompareMode mode,
			Value compareValue, PinState out = PinState::Enable);

	static inline void
	setCompareValue(uint32_t channel, Value value)
	{
%% if target is stm32f2 or target is stm32f3 or target is stm32f4
		*(&TIM{{ id }}->CCR1 + (channel - 1)) = value;
%% else
		*(&TIM{{ id }}->CCR1 + ((channel - 1) * 2)) = value;
%% endif
	}

	static inline Value
	getCompareValue(uint32_t channel)
	{
%% if target is stm32f2 or target is stm32f3 or target is stm32f4
		return *(&TIM{{ id }}->CCR1 + (channel - 1));
%% else
		return *(&TIM{{ id }}->CCR1 + ((channel - 1) * 2));
%% endif
	}

public:
	static void
	enableInterruptVector(bool enable, uint32_t priority);

	static inline void
	enableInterrupt(Interrupt interrupt)
	{
		TIM{{ id }}->DIER |= static_cast<uint32_t>(interrupt);
	}

	static inline void
	disableInterrupt(Interrupt interrupt)
	{
		TIM{{ id }}->DIER &= ~static_cast<uint32_t>(interrupt);
	}

	static inline void
	enableDmaRequest(DmaRequestEnable dmaRequests)
	{
		TIM{{ id }}->DIER |= static_cast<uint32_t>(dmaRequests);
	}

	static inline void
	disableDmaRequest(DmaRequestEnable dmaRequests)
	{
		TIM{{ id }}->DIER &= ~static_cast<uint32_t>(dmaRequests);
	}

	static inline InterruptFlag
	getInterruptFlags()
	{
		return (InterruptFlag) TIM{{ id }}->SR;
	}

	static inline void
	acknowledgeInterruptFlags(InterruptFlag flags)
	{
		// Flags are cleared by writing a zero to the flag position.
		// Writing a one is ignored.
		TIM{{ id }}->SR = ~static_cast<uint32_t>(flags);
	}
};
}
}

#endif // XPCC_STM32_TIMER_{{ id }}_HPP
