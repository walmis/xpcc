// coding: utf-8
/* Copyright (c) 2011-2013, Roboterclub Aachen e.V.
* All Rights Reserved.
*
* The file is part of the xpcc library and is released under the 3-clause BSD
* license. See the file `LICENSE` for the full license governing this code.
*/
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32_CAN{{ id }}_HPP
#define XPCC_STM32_CAN{{ id }}_HPP

#include <xpcc/communication/can/message.hpp>
#include <xpcc/architecture/peripheral/can.hpp>
#include "../../../device.hpp"
#include "../../../type_ids.hpp"

#include "../../clock/common/common_clock.hpp"
#include "error_code.hpp"
#include "can_filter.hpp"

using namespace xpcc::clock; // for MHzxx

namespace xpcc
{

namespace stm32
{
/**
 * @brief		Basic Extended CAN{{ id }}
 *
 * The Basic Extended CAN peripheral, named bxCAN, interfaces the CAN
 * network. It supports the CAN protocols version 2.0A and B. It has
 * been designed to manage a high number of incoming messages
 * efficiently with a minimum CPU load.
 *
 * ## Filter
 *
 * For connectivity line devices there are 28 filter banks,
 * i=0 .. 27, in other devices there are 14 filter banks i = 0 ..13.
 *
 * The 28 filter banks for the connectivity line devices are
 * shared between CAN1 and CAN2.
 *
 * ## Configuration
 * You can set the buffer size using the `tx_buffer` and `rx_buffer` parameters.
 *
 * @author		Fabian Greif <fabian.greif@rwth-aachen.de>
 * @ingroup		stm32
 */
class Can{{ id }} : public ::xpcc::Can
{
public:
	enum class
	Mode : uint32_t
	{
		Normal		= 0,
		ListenOnly	= CAN_BTR_SILM,
		LoopBack	= CAN_BTR_LBKM,
		ListenOnlyLoopBack	= CAN_BTR_SILM | CAN_BTR_LBKM,
	};

	enum class
	Bitrate : int
	{
		kBps10	= kHz10,
		kBps20	= kHz20,
		kBps50	= kHz50,
		kBps100	= kHz100,
		kBps125	= kHz125,
		kBps250	= kHz250,
		kBps500	= kHz500,
		MBps1	= MHz1,
	};

public:
%% if target is stm32f3
	/// TypeId used to connect GPIO pins to this peripheral's rx.
	static const TypeId::CanNRx Rx;
	/// TypeId used to connect GPIO pins to this peripheral's tx.
	static const TypeId::CanNTx Tx;
%% else
	/// TypeId used to connect GPIO pins to this peripheral's rx.
	static const TypeId::Can{{ id }}Rx Rx;
	/// TypeId used to connect GPIO pins to this peripheral's tx.
	static const TypeId::Can{{ id }}Tx Tx;
%% endif
private:
	/// Private Initializer with computed prescaler and timing constants
	static void
	initializeWithPrescaler(uint16_t prescaler, uint8_t bs1, uint8_t bs2,
	uint32_t interruptPriority, Mode startupMode, bool overwriteOnOverrun);
public:
	/**
	 * Enables the clock for the CAN controller and resets all settings
	 * 
	 * \param bitrate
	 * 			CAN bitrate (defined in driver/connectivity/can/message.hpp)
	 * \param interruptPriority
	 * 			Interrupt vector priority (0=highest to 15=lowest)
	 * \param overwriteOnOverrun
	 * 			Once a receive FIFO is full the next incoming message
	 * 			will overwrite the previous one if \c true otherwise
	 * 			the incoming message will be discarded
	 * 
	 * \warning	Has to called after connect(), but before any
	 * 			other function from this class!
	 */
	template< class clockSource, Bitrate bitrate = Bitrate::kBps125>
	static inline void
	initialize(	uint32_t interruptPriority, Mode startupMode = Mode::Normal,
				bool overwriteOnOverrun = true)
	{
		/* Example for CAN bit timing:
		 *   CLK on APB1 = 36 MHz
		 *   BaudRate = 125 kBPs = 1 / NominalBitTime
		 *   NominalBitTime = 8uS = tq + tBS1 + tBS2
		 * with:
		 *   tBS1 = tq * (TS1[3:0] + 1) = 12 * tq
		 *   tBS2 = tq * (TS2[2:0] + 1) = 5 * tq
		 *   tq = (BRP[9:0] + 1) * tPCLK
		 * where tq refers to the Time quantum
		 *   tPCLK = time period of the APB clock = 1 / 36 MHz
		 *
		 * STM32F1xx   tPCLK = 1 / 36 MHz
		 * STM32F20x   tPCLK = 1 / 30 MHz
		 * STM32F40x   tPCLK = 1 / 42 MHz 
		 */
		constexpr uint8_t bs1 = (clockSource::Can{{ id }} == MHz30)? 10 :
								(clockSource::Can{{ id }} == MHz36)? 12 :
								(clockSource::Can{{ id }} == MHz42)? 14 : 0;
		constexpr uint8_t bs2 = (clockSource::Can{{ id }} == MHz30)?  4 :
								(clockSource::Can{{ id }} == MHz36)?  5 :
								(clockSource::Can{{ id }} == MHz42)?  6 : 0;
		constexpr uint16_t prescaler = 	clockSource::Can{{ id }} /
								(static_cast<int>(bitrate) * (1 + bs1 + bs2));
		static_assert(prescaler > 0,
				"Unsupported frequency for Can peripheral. "
				"Only 30 Mhz, 36 MHz and 42 MHz are supported at the moment.");

		return initializeWithPrescaler(prescaler, bs1, bs2,
		interruptPriority, startupMode, overwriteOnOverrun);
	}

	/**
	 * The the operating mode.
	 * 
	 * Default after initialization is the normal mode.
	 */
	static void
	setMode(Mode mode);

public:
	// Can Interface Methods
	static bool
	isMessageAvailable();

	static bool
	getMessage(can::Message& message);

	static bool
	isReadyToSend();

	static bool
	sendMessage(const can::Message& message);

public:
	// Extended Functionality
	/**
	 * Get Receive Error Counter.
	 *
	 * In case of an error during reception, this counter is
	 * incremented by 1 or by 8 depending on the error condition as
	 * defined by the CAN standard. After every successful reception
	 * the counter is decremented by 1 or reset to 120 if its value
	 * was higher than 128. When the counter value exceeds 127, the
	 * CAN controller enters the error passive state.
	 */
	static inline uint8_t
	getReceiveErrorCounter()
	{
		return (CAN{{ id }}->ESR & CAN_ESR_REC) >> 24;
	}

	/**
	 * Get Transmit Error Counter.
	 *
	 */
	static inline uint8_t
	getTransmitErrorCounter()
	{
		return (CAN{{ id }}->ESR & CAN_ESR_TEC) >> 16;
	}

	static BusState
	getBusState();
	
	/**
	 * Enable the error and status change interrupt.
	 * 
	 * Can be generated by the following events:
	 * - Error condition, for more details on error conditions please
	 *   refer to the CAN Error Status register (CAN_ESR).
	 * - Wakeup condition, SOF monitored on the CAN Rx signal.
	 * - Entry into Sleep mode
	 * 
	 * You need to create you own interrupt handler for this interrupt.
	 * The interrupt handler has a fixed name:
	 * \code
	 * extern "C" void
	 * CAN{{ id }}_SCE_IRQHandler()
	 * {
	 *     ...
	 *     
	 *     // e.g. Acknowledge interrupt
	 *     CAN{{ id }}->MSR = CAN_MSR_ERRI;
	 * }
	 * \endcode
	 * 
	 * \param interruptEnable
	 * 			Upper 24-bit of the CAN_IER register. E.g.:
	 * 			 - CAN_IER_BOFIE
	 * 			 - CAN_IER_EPVIE
	 * 			 - ... 
	 * 			See Reference Manual >> bxCAN >> CAN_IER Register
	 * \param interruptPriority
	 * 			Interrupt vector priority (0=highest to 15=lowest)
	 */
	static void
	enableStatusChangeInterrupt(uint32_t interruptEnable,
			uint32_t interruptPriority);
};
}
}
#endif	//  XPCC_STM32_CAN{{ id }}_HPP

