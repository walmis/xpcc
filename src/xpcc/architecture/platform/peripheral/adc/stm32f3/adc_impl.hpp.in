// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
* All Rights Reserved.
*
* The file is part of the xpcc library and is released under the 3-clause BSD
* license. See the file `LICENSE` for the full license governing this code.
*/
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32F3_ADC{{ id }}_HPP
#	error 	"Don't include this file directly, use 'adc_{{ id }}.hpp' instead!"
#endif
%#
%% if id in [1,2]
	%% set id_common = '12'
	%% set id_common_u = '1_2'
%% elif id in [3,4]
	%% set id_common = '34'
	%% set id_common_u = '3_4'
%% endif
%#

#include <xpcc/architecture/driver/delay.hpp>	// xpcc::delay_us

void
xpcc::stm32::Adc{{ id }}::initialize(const ClockMode clk, const Prescaler pre,
		const CalibrationMode cal, const bool blocking)
{
	uint32_t tmp = 0;

	// enable clock
	RCC->AHBENR |= RCC_AHBENR_ADC{{ id_common }}EN;

	// reset ADC
	// FIXME: not a good idea since you can only reset both
	// ADC1/ADC2 or ADC3/ADC4 at once ....
	// RCC->APB2RSTR |=  RCC_APB2RSTR_ADC{{ id }}RST;
	// RCC->APB2RSTR &= ~RCC_APB2RSTR_ADC{{ id }}RST;

	// set ADC "analog" clock source
	if (clk != ClockMode::DoNotChange) {
		if (clk == ClockMode::Asynchronous) {
			setPrescaler(pre);
		}
		tmp  =  ADC{{ id_common_u }}->CCR;
		tmp &= ~ADC12_CCR_CKMODE;
		tmp |=  static_cast<uint32_t>(clk);
		ADC{{ id_common_u }}->CCR = tmp;
	}

	// enable regulator
	ADC{{ id }}->CR &= ~ADC_CR_ADVREGEN;
	ADC{{ id }}->CR |= static_cast<uint32_t>(VoltageRegulatorState::Enabled);
	xpcc::delay_us(10);	// FIXME: this is ugly -> find better solution

	calibrate(cal, true);	// blocking calibration

	ADC{{ id }}->CR |= ADC_CR_ADEN;
	if (blocking) {
		while(!isReady());
		acknowledgeInterruptFlag(InterruptFlag::Ready);
	}
}

void
xpcc::stm32::Adc{{ id }}::disable(const bool blocking)
{
	ADC{{ id }}->CR |= ADC_CR_ADDIS;
	if (blocking) {
		// wait for ADC_CR_ADDIS to be cleared by hw
		while(ADC{{ id }}->CR & ADC_CR_ADDIS);
	}
	// disable clock
	RCC->AHBENR &= ~RCC_AHBENR_ADC{{ id_common }}EN;
}

void
xpcc::stm32::Adc{{ id }}::setPrescaler(const Prescaler pre)
{
	uint32_t tmp;
	tmp  = RCC->CFGR2;
	tmp &= ~static_cast<uint32_t>(Prescaler::Div256AllBits);
	tmp |=  static_cast<uint32_t>(pre);
	RCC->CFGR2 = tmp;
}

bool
xpcc::stm32::Adc{{ id }}::isReady()
{
	return (static_cast<uint32_t>(getInterruptFlags()) &
					static_cast<uint32_t>(InterruptFlag::Ready));
}

void
xpcc::stm32::Adc{{ id }}::calibrate(const CalibrationMode mode,
									const bool blocking)
{
	if (mode != CalibrationMode::DoNotCalibrate) {
		ADC{{ id }}->CR |= ADC_CR_ADCAL |
										static_cast<uint32_t>(mode);
		if(blocking) {
			// wait for ADC_CR_ADCAL to be cleared by hw
			while(ADC{{ id }}->CR & ADC_CR_ADCAL);
		}
	}
}

void
xpcc::stm32::Adc{{ id }}::setLeftAdjustResult(const bool enable)
{
	if (enable) {
		ADC{{ id }}->CFGR |= ADC_CFGR_ALIGN;
	}
	else {
		ADC{{ id }}->CFGR &= ~ADC_CFGR_ALIGN;
	}
}

void
xpcc::stm32::Adc{{ id }}::setChannel(	const Channel channel,
										const SampleTime sampleTime)
{
	uint32_t tmpreg;
	// SQR1[10:6] contain SQ1[4:0]
	ADC{{ id }}->SQR1 = (static_cast<uint8_t>(channel) & 0b11111) << 6;

	if (static_cast<uint8_t>(channel) < 10) {
		tmpreg = ADC{{ id }}->SMPR1
			& ((~ADC_SMPR1_SMP0) << (static_cast<uint8_t>(channel) * 3));
		tmpreg |= static_cast<uint32_t>(sampleTime) <<
						(static_cast<uint8_t>(channel) * 3);
		ADC{{ id }}->SMPR1 = tmpreg;
	}
	else {
		tmpreg = ADC{{ id }}->SMPR2
			& ((~ADC_SMPR2_SMP10) << ((static_cast<uint8_t>(channel)-10) * 3));
		tmpreg |= static_cast<uint32_t>(sampleTime) <<
						((static_cast<uint8_t>(channel)-10) * 3);
		ADC{{ id }}->SMPR2 = tmpreg;
	}
}

void
xpcc::stm32::Adc{{ id }}::setFreeRunningMode(const bool enable)
{
	if (enable) {
		ADC{{ id }}->CFGR |=  ADC_CFGR_CONT; // set to continuous mode
	} else {
		ADC{{ id }}->CFGR &= ~ADC_CFGR_CONT; // set to single mode
	}
}


void
xpcc::stm32::Adc{{ id }}::startConversion(void)
{
	// TODO: maybe add more interrupt flags
	acknowledgeInterruptFlag(static_cast<InterruptFlag>(
		static_cast<uint32_t>(InterruptFlag::EndOfSampling) |
		static_cast<uint32_t>(InterruptFlag::Overrun)));
	// starts single conversion for the regular group
	ADC{{ id }}->CR |= ADC_CR_ADSTART;
}

bool
xpcc::stm32::Adc{{ id }}::isConversionFinished(void)
{
	return (static_cast<uint32_t>(getInterruptFlags()) &
			static_cast<uint32_t>(InterruptFlag::EndOfSampling));
}

// ----------------------------------------------------------------------------
// TODO: move this to some shared header for all cortex m3 platforms
// Re-implemented here to save some code space. As all arguments in the calls
// below are constant the compiler is able to calculate everything at
// compile time.

#ifndef XPCC_CUSTOM_NVIC_FUNCTIONS
#define XPCC_CUSTOM_NVIC_FUNCTIONS

static ALWAYS_INLINE void
nvicEnableInterrupt(const IRQn_Type IRQn)
{
	NVIC->ISER[(static_cast<uint32_t>(IRQn) >> 5)] =
								(1 << ((uint32_t)(IRQn) & 0x1F));
}

static ALWAYS_INLINE void
nvicDisableInterrupt(IRQn_Type IRQn)
{
	NVIC_DisableIRQ(IRQn);
}

#endif // XPCC_CUSTOM_NVIC_FUNCTIONS

void
xpcc::stm32::Adc{{ id }}::enableInterruptVector(const uint32_t priority,
												const bool enable)
{
%% if id < 3
	const IRQn_Type INTERRUPT_VECTOR = ADC1_2_IRQn;
%% elif id < 5
	const IRQn_Type INTERRUPT_VECTOR = ADC{{ id }}_IRQn;
%% endif

	if (enable) {
		NVIC_SetPriority(INTERRUPT_VECTOR, priority);
		nvicEnableInterrupt(INTERRUPT_VECTOR);
	} else {
		NVIC_DisableIRQ(INTERRUPT_VECTOR);
	}
}

void
xpcc::stm32::Adc{{ id }}::enableInterrupt(const Interrupt interrupt)
{
	ADC{{ id }}->IER |= static_cast<uint32_t>(interrupt);
}

void
xpcc::stm32::Adc{{ id }}::disableInterrupt(const Interrupt interrupt)
{
	ADC{{ id }}->IER &= ~static_cast<uint32_t>(interrupt);
}

xpcc::stm32::Adc{{ id }}::InterruptFlag
xpcc::stm32::Adc{{ id }}::getInterruptFlags()
{
	return static_cast<InterruptFlag>(ADC{{ id }}->ISR);
}

void
xpcc::stm32::Adc{{ id }}::acknowledgeInterruptFlag(const InterruptFlag flags)
{
	// Flags are cleared by writing a one to the flag position.
	// Writing a zero is ignored.
	ADC{{ id }}->ISR = static_cast<uint32_t>(flags);
}
