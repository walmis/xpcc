// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32_SPI_HAL{{ id }}_HPP
#	error 	"Don't include this file directly, use 'spi_hal{{ id }}.hpp' instead!"
#endif

void inline
xpcc::stm32::SpiHal{{ id }}::enable()
{
%% if id == 1
	// enable clock
	RCC->APB2ENR |= RCC_APB2ENR_SPI{{ id }}EN;
	// reset spi
	RCC->APB2RSTR |=  RCC_APB2RSTR_SPI{{ id }}RST;
	RCC->APB2RSTR &= ~RCC_APB2RSTR_SPI{{ id }}RST;
%% elif id in [2, 3]
	// enable clock
	RCC->APB1ENR |= RCC_APB1ENR_SPI{{ id }}EN;
	// reset spi
	RCC->APB1RSTR |=  RCC_APB1RSTR_SPI{{ id }}RST;
	RCC->APB1RSTR &= ~RCC_APB1RSTR_SPI{{ id }}RST;
%% endif
	SPI{{ id }}->CR1 |= SPI_CR1_SPE;		// SPI Enable
}

void inline
xpcc::stm32::SpiHal{{ id }}::disable()
{
	// disable clock
%% if id == 1
	RCC->APB2ENR &= ~RCC_APB2ENR_SPI{{ id }}EN;
%% elif id in [2, 3]
	RCC->APB1ENR &= ~RCC_APB1ENR_SPI{{ id }}EN;
%% endif
}

void inline
xpcc::stm32::SpiHal{{ id }}::initialize(Prescaler prescaler,
		MasterSelection masterSelection, DataMode dataMode,
		DataOrder dataOrder, DataSize dataSize)
{
	enable();
	// disable peripheral
	SPI{{ id }}->CR1 &= ~SPI_CR1_SPE;
	// set parameters
	SPI{{ id }}->CR1 = 	  static_cast<uint32_t>(dataMode)
						| static_cast<uint32_t>(dataOrder)
						| static_cast<uint32_t>(dataSize)
						| static_cast<uint32_t>(masterSelection)
%% if target is stm32f1 or target is stm32f2 or target is stm32f4
						| static_cast<uint32_t>(prescaler);
%% elif target is stm32f0 or target is stm32f3
						;
	SPI{{ id }}->CR2 = static_cast<uint32_t>(prescaler);
%% endif
	if(masterSelection == MasterSelection::Master) {
		SPI{{ id }}->CR2 |=  SPI_CR2_SSOE; // for master mode
	}
	// reenable peripheral
	SPI{{ id }}->CR1 |= SPI_CR1_SPE;
}

void inline
xpcc::stm32::SpiHal{{ id }}::setDataMode(DataMode dataMode)
{
	SPI{{ id }}->CR1 = (SPI{{ id }}->CR1 & ~static_cast<uint32_t>(DataMode::All))
										 | static_cast<uint32_t>(dataMode);
}

void inline
xpcc::stm32::SpiHal{{ id }}::setDataOrder(DataOrder dataOrder)
{
	SPI{{ id }}->CR1 = (SPI{{ id }}->CR1 & ~static_cast<uint32_t>(DataOrder::All))
										 | static_cast<uint32_t>(dataOrder);
}

void inline
xpcc::stm32::SpiHal{{ id }}::setDataSize(DataSize dataSize)
{
%% if target is stm32f0 or target is stm32f3
	SPI{{ id }}->CR2 = (SPI{{ id }}->CR2 & ~static_cast<uint32_t>(DataSize::All))
										 | static_cast<uint32_t>(dataSize);
%% elif target is stm32f1 or target is stm32f2 or target is stm32f4
	// TODO: implement as set/reset bit
	SPI{{ id }}->CR1 = (SPI{{ id }}->CR1 & ~static_cast<uint32_t>(DataSize::All))
										 | static_cast<uint32_t>(dataSize);
%% endif
}

void inline
xpcc::stm32::SpiHal{{ id }}::setMasterSelection(MasterSelection masterSelection)
{
	// TODO: implement as set/reset bit
	SPI{{ id }}->CR1 = (SPI{{ id }}->CR1 & ~static_cast<uint32_t>(MasterSelection::All))
										 | static_cast<uint32_t>(masterSelection);
}

inline bool
xpcc::stm32::SpiHal{{ id }}::isReceiveRegisterNotEmpty()
{
	return getInterruptFlags() & InterruptFlag::RxBufferNotEmpty;
}

inline bool
xpcc::stm32::SpiHal{{ id }}::isTransmitRegisterEmpty()
{
	return getInterruptFlags() & InterruptFlag::TxBufferEmpty;
}

void inline
xpcc::stm32::SpiHal{{ id }}::write(uint16_t data)
{
	SPI{{ id }}->DR = data;
}

void inline
xpcc::stm32::SpiHal{{ id }}::read(uint8_t &data)
{
	data = static_cast<uint8_t>(SPI{{ id }}->DR);
}

void inline
xpcc::stm32::SpiHal{{ id }}::read(uint16_t &data)
{
	data = static_cast<uint16_t>(SPI{{ id }}->DR);
}

void inline
xpcc::stm32::SpiHal{{ id }}::enableInterruptVector(bool enable, uint32_t priority)
{
	if (enable) {
		// Set priority for the interrupt vector
		NVIC_SetPriority(SPI{{ id }}_IRQn, priority);
		// register IRQ at the NVIC
		NVIC_EnableIRQ(SPI{{ id }}_IRQn);
	}
	else {
		NVIC_DisableIRQ(SPI{{ id }}_IRQn);
	}
}

void inline
xpcc::stm32::SpiHal{{ id }}::enableInterrupt(Interrupt interrupt)
{
	SPI{{ id }}->CR2 |= static_cast<uint32_t>(interrupt);
}

void inline
xpcc::stm32::SpiHal{{ id }}::disableInterrupt(Interrupt interrupt)
{
	SPI{{ id }}->CR2 &= ~static_cast<uint32_t>(interrupt);
}

xpcc::stm32::SpiHal{{ id }}::InterruptFlag inline
xpcc::stm32::SpiHal{{ id }}::getInterruptFlags()
{
	return static_cast<InterruptFlag>(SPI{{ id }}->SR );
}

void inline
xpcc::stm32::SpiHal{{ id }}::acknowledgeInterruptFlag(InterruptFlag /*flags*/)
{
	// TODO: implement; see STM32F3 reference manual p. 736
	// SPI{{ id }}->SR =  static_cast<InterruptFlag>(flags);
}
