// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *	 * Redistributions of source code must retain the above copyright
 *	   notice, this list of conditions and the following disclaimer.
 *	 * Redistributions in binary form must reproduce the above copyright
 *	   notice, this list of conditions and the following disclaimer in the
 *	   documentation and/or other materials provided with the distribution.
 *	 * Neither the name of the Roboterclub Aachen e.V. nor the
 *	   names of its contributors may be used to endorse or promote products
 *	   derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------
%# This global dict accepts platform specific peripheral interrupts
%# generated by the platform.startupHeader macro
%% set i = {}
%# Generate Cortex Interrupts
%% if target is cortex_m3 or target is cortex_m4
%% 	do i.update({-12:  ["MemManage_Handler", "MPU Fault Handler"]})
%% 	do i.update({-11:  ["BusFault_Handler", "Bus Fault Handler"]})
%% 	do i.update({-10:  ["UsageFault_Handler", "Usage Fault Handler"]})
%% 	do i.update({ -4: ["DebugMon_Handler", "Debug Monitor Handler"]})
%% endif
%% do i.update({-5: ["SVC_Handler", "SVCall Handler"]})
%% do i.update({-2: ["PendSV_Handler", "PendSV Handler"]})
%% do i.update({-1: ["SysTick_Handler", "SysTick Handler"]})
%# Include Target Specific Files
%% if target is stm32
%%	import 'stm32/stm32.macros' as platform with context
%% elif target is lpc
%%	import 'lpc/lpc.macros' as platform with context
%% endif
%# Set peripheralInterrupts variable that contains device specific interrupts
{{ platform.appendInterrupts() }}
%# Count Interrupts
%% set number_of_interrupts = i.keys()|sort|last

#include <stdint.h>
#include <xpcc/architecture/utils.hpp>
#include "../../device.hpp"
#include "xpcc_config.hpp"
%% if parameters.enable_gpio
%%	if target is stm32f0 or target is stm32f2 or target is stm32f3 or target is stm32f4
#include "../../peripheral/gpio/stm32/gpio_enable.h"
%%	elif target is lpc
#include "../../peripheral/gpio/lpc/gpio_enable.h"
%%	endif
%% endif

// ----------------------------------------------------------------------------
{{ platform.defines() }}

// ----------------------------------------------------------------------------
/*
 * Provide weak aliases for each Exception handler to defaultHandler.
 * As they are weak aliases, any function with the same name will override
 * this definition.
 */
void Reset_Handler(void);
void NMI_Handler(void)					__attribute__ ((weak, alias("defaultHandler")));
%% if target is cortex_m3 or target is cortex_m4
void HardFault_Handler(void);
%% elif target is cortex_m0
%# for cortex m0 no hard fault handler is implemented
void HardFault_Handler(void)			__attribute__ ((weak, alias("defaultHandler")));
%% endif
%# Remember declarations to avoid redeclarations
%% set declarations = []
%% for addr, interrupt in i.iteritems()
%% 	if interrupt[0] not in declarations
%%	do declarations.append(interrupt[0])
{{ ("void " + interrupt[0] + "(void)") | xpcc.pad(36)}}__attribute__ ((weak, alias("defaultHandler")));
%% endif
%% endfor
// ----------------------------------------------------------------------------
// Interrupt vectors
typedef void (* const FunctionPointer)(void);

// defined in the linkerscript
extern uint32_t __stack_end;

%% if parameters.vector_table_in_ram
// Define the vector table
FunctionPointer flashVectors[4] 
__attribute__ ((section(".reset"))) =
{
	(FunctionPointer) &__stack_end,	// stack pointer
	Reset_Handler,				// code entry point
	NMI_Handler,				// NMI handler
	HardFault_Handler,			// hard fault handler
};

FunctionPointer ramVectors[] __attribute__ ((section(".vectors"))) =
%% else
FunctionPointer flashVectors[] __attribute__ ((section(".reset"))) =
%% endif
{
	(FunctionPointer) &__stack_end,		// -16: stack pointer
	Reset_Handler,						// -15: code entry point
	NMI_Handler,						// -14: Non Maskable Interrupt handler
	HardFault_Handler,					// -13: hard fault handler
%% for addr in range(4 - 16, number_of_interrupts + 1)
%% 	if addr in i
	{{ (i[addr][0] + ",") | xpcc.pad(32) }}// {{addr}}: {{i[addr][1]}}
%% 	else
	0,									// {{addr}}
%% 	endif
%% endfor
};

// ----------------------------------------------------------------------------
// The following are constructs created by the linker, indicating where the
// the "data" and "bss" segments reside in memory.  The initializers for the
// for the "data" segment resides immediately following the "text" segment.
extern uint32_t __fastcode_load;
extern uint32_t __fastcode_start;
extern uint32_t __fastcode_end;

extern uint32_t __data_load;
extern uint32_t __data_start;
extern uint32_t __data_end;

extern uint32_t __bss_start;
extern uint32_t __bss_end;

// Application's main function
int
main(void);

// calls CTORS of static objects
void
__libc_init_array(void);

extern void
exit(int) __attribute__ ((noreturn, weak));

%% if parameters.allocator == "block_allocator"
extern void __xpcc_initialize_memory(void);
%% endif

// ----------------------------------------------------------------------------
// This is the code that gets called when the processor first starts execution
// following a reset event.  Only the absolutely necessary set is performed,
// after which the application supplied main() routine is called.  Any fancy
// actions (such as making decisions based on the reset cause register, and
// resetting the bits in that register) are left solely in the hands of the
// application.
void
Reset_Handler(void)
{
	// startup delay
	for (volatile unsigned long i = 0; i < 500000; i++)
	{
	}
	
	// Copy functions to RAM (.fastcode)
	uint32_t* src = &__fastcode_load;
	uint32_t* dest = &__fastcode_start;
	while (dest < &__fastcode_end)
	{
		*(dest++) = *(src++);
	}
	
	// Copy the data segment initializers from flash to RAM (.data)
	src = &__data_load;
	dest = &__data_start;
	while (dest < &__data_end)
	{
		*(dest++) = *(src++);
	}
	
	// Fill the bss segment with zero (.bss)
	dest = &__bss_start;
	while (dest < &__bss_end)
	{
		*(dest++) = 0;
	}

%# Perform Platform Specific Setup
{{ platform.startupCode() }}

%% if target is cortex_m4f
	// Enable FPU in privileged and user mode
	SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));  // set CP10 and CP11 Full Access
%% endif

%% if target is cortex_m3 or target is cortex_m4
	// Setup NVIC
	// Set vector table
	const uint32_t offset = 0;
	SCB->VTOR = 0x08000000 | (offset & 0x1FFFFF80);

	// Lower priority level for all peripheral interrupts to lowest possible
	for (uint32_t i = 0; i < NR_INTERRUPTS; i++) {
		const uint32_t priority = 0xF;
		NVIC->IP[i] = (priority & 0xF) << 4;
	}

	// Set the PRIGROUP[10:8] bits to
	// - 4 bits for pre-emption priority,
	// - 0 bits for subpriority
	SCB->AIRCR = 0x05FA0000 | 0x300;

	// Enable fault handlers
	/*SCB->SHCSR |=
			SCB_SHCSR_BUSFAULTENA_Msk |
			SCB_SHCSR_USGFAULTENA_Msk |
			SCB_SHCSR_MEMFAULTENA_Msk;*/
%% endif

%% if parameters.enable_gpio
	// Enable GPIO Clock
	xpcc_gpio_enable();
%% endif

	// Call CTORS of static objects
	__libc_init_array();

	%% if parameters.allocator == "block_allocator"
	// initialize xpcc block allocator
	__xpcc_initialize_memory();
	%% endif

	// Call the application's entry point
	main();
	
	exit(1);
	
	while (1)
	{
	}
}

// ----------------------------------------------------------------------------
/**
 * @brief	Default interrupt handler
 * 
 * This functions gets called if an interrupt handler is not defined. It just
 * enters an infinite loop leaving the processor state intact for a debugger
 * to be examined.
*/
void
defaultHandler(void)
{
	while (1)
	{
	}
}
