%# coding: utf-8
%# ----------------------------------------------------------------------------
%#* Copyright (c) 2011, Roboterclub Aachen e.V.
%#* All rights reserved.
%#*
%#* Redistribution and use in source and binary forms, with or without
%#* modification, are permitted provided that the following conditions are met:
%#* 
%#*     * Redistributions of source code must retain the above copyright
%#*       notice, this list of conditions and the following disclaimer.
%#*     * Redistributions in binary form must reproduce the above copyright
%#*       notice, this list of conditions and the following disclaimer in the
%#*       documentation and/or other materials provided with the distribution.
%#*     * Neither the name of the Roboterclub Aachen e.V. nor the
%#*       names of its contributors may be used to endorse or promote products
%#*       derived from this software without specific prior written permission.
%#*
%#* THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
%#* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
%#* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
%#. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
%#* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
%#* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
%#* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
%#* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
%#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
%#* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%#*/


%# This File includes STM32 specific macros for the generic cortex-m3 startup.c


%% macro defines()
%#
#define FLASH_WAIT_STATE_0		0x0
#define FLASH_WAIT_STATE_1		0x1
#define FLASH_WAIT_STATE_2		0x2
#define FLASH_WAIT_STATE_3		0x3
#define FLASH_WAIT_STATE_4		0x4
#define FLASH_WAIT_STATE_5		0x5
#define FLASH_WAIT_STATE_6		0x6
#define FLASH_WAIT_STATE_7		0x7

#define NR_INTERRUPTS 82
%#
%% endmacro


%% macro appendInterrupts()
%#
%% if target is stm32f0
%%	include 'stm32f0_ivectors.macros' with context
%% else
%#
%% do i.update({ 0: ["WWDG_IRQHandler", "Window Watchdog"]})
%% do i.update({ 1: ["PVD_IRQHandler", "PVD through EXTI Line detect"]})
%% do i.update({ 2: ["TAMP_STAMP_IRQHandler", "Tamper and TimeStamps through the EXTI line"]})
%% do i.update({ 3: ["RTC_WKUP_IRQHandler", "Wakeup through the EXTI line"]})
%% do i.update({ 4: ["FLASH_IRQHandler", "Flash"]})
%% do i.update({ 5: ["RCC_IRQHandler", "RCC"]})
%% do i.update({ 6: ["EXTI0_IRQHandler", "EXTI Line 0"]})
%% do i.update({ 7: ["EXTI1_IRQHandler", "EXTI Line 1"]})
%% do i.update({ 8: ["EXTI2_IRQHandler", "EXTI Line 2"]})
%% do i.update({ 9: ["EXTI3_IRQHandler", "EXTI Line 3"]})
%% do i.update({10: ["EXTI4_IRQHandler", "EXTI Line 4"]})
%% do i.update({11: ["DMA1_Stream0_IRQHandler", "DMA1 Stream 0"]})
%% do i.update({12: ["DMA1_Stream1_IRQHandler", "DMA1 Stream 1"]})
%% do i.update({13: ["DMA1_Stream2_IRQHandler", "DMA1 Stream 2"]})
%% do i.update({14: ["DMA1_Stream3_IRQHandler", "DMA1 Stream 3"]})
%% do i.update({15: ["DMA1_Stream4_IRQHandler", "DMA1 Stream 4"]})
%% do i.update({16: ["DMA1_Stream5_IRQHandler", "DMA1 Stream 5"]})
%% do i.update({17: ["DMA1_Stream6_IRQHandler", "DMA1 Stream 6"]})
%% if target is stm32f3
%% 	do i.update({18: ["ADC_IRQHandler", "ADC1 and ADC2"]})
%% elif target is stm32f2 or target is stm32f4
%% 	do i.update({18: ["ADC_IRQHandler", "ADC1, ADC2 and ADC3s"]})
%% endif
%% do i.update({19: ["CAN1_TX_IRQHandler", "CAN1 TX"]})
%% do i.update({20: ["CAN1_RX0_IRQHandler", "CAN1 RX0"]})
%% do i.update({21: ["CAN1_RX1_IRQHandler", "CAN1 RX1"]})
%% do i.update({22: ["CAN1_SCE_IRQHandler", "CAN1 SCE"]})
%% do i.update({23: ["EXTI9_5_IRQHandler", "EXTI Line 9..5"]})
%% if target is stm32f3
%% 	do i.update({24: ["TIM1_BRK_TIM15_IRQHandler", "TIM1 Break"]})
%% 	do i.update({25: ["TIM1_UP_TIM16_IRQHandler", "TIM1 Update"]})
%% 	do i.update({26: ["TIM1_TRG_COM_TIM17_IRQHandler", "TIM1 Trigger and Commutation"]})
%% elif target is stm32f2 or target is stm32f4
%% 	do i.update({24: ["TIM1_BRK_TIM9_IRQHandler", "TIM1 Break"]})
%% 	do i.update({25: ["TIM1_UP_TIM10_IRQHandler", "TIM1 Update"]})
%% 	do i.update({26: ["TIM1_TRG_COM_TIM11_IRQHandler", "TIM1 Trigger and Commutation"]})
%% endif
%% do i.update({27: ["TIM1_CC_IRQHandler", "TIM1 Capture Compare"]})
%% do i.update({28: ["TIM2_IRQHandler", "TIM2"]})
%% do i.update({29: ["TIM3_IRQHandler", "TIM3"]})
%% do i.update({30: ["TIM4_IRQHandler", "TIM4"]})
%% if target is stm32f3
%# TODO: is this distinction needed?? In stm32f30x.h the handler is called I2C1_EV_IRQHandler
%% 	do i.update({31: ["I2C1_EV_EXTI23_IRQHandler", "I2C1 Event and EXTI Line23"]})
%% 	do i.update({33: ["I2C2_EV_EXTI24_IRQHandler", "I2C2 Event and EXTI Line24"]})
%% elif target is stm32f2 or target is stm32f4
%% 	do i.update({31: ["I2C1_EV_IRQHandler", "I2C1 Event"]})
%% 	do i.update({33: ["I2C2_EV_IRQHandler", "I2C2 Event"]})
%% endif
%% do i.update({32: ["I2C1_ER_IRQHandler", "I2C1 Error"]})
%% do i.update({34: ["I2C2_ER_IRQHandler", "I2C2 Error"]})
%% do i.update({35: ["SPI1_IRQHandler", "SPI1"]})
%% do i.update({36: ["SPI2_IRQHandler", "SPI2"]})
%% do i.update({37: ["USART1_IRQHandler", "USART1"]})
%% do i.update({38: ["USART2_IRQHandler", "USART2"]})
%% do i.update({39: ["USART3_IRQHandler", "USART3"]})
%% do i.update({40: ["EXTI15_10_IRQHandler", "External Line[15:10]s"]})
%% do i.update({41: ["RTCAlarm_IRQHandler", "RTC Alarm (A and B) through EXTI Line"]})
%% if target is stm32f3
%% 	do i.update({42: ["USB_WKUP_IRQHandler", "USB Wakeup through EXTI line"]})
%% 	do i.update({43: ["TIM8_BRK_IRQHandler", "TIM8 Break"]})
%% 	do i.update({44: ["TIM8_UP_IRQHandler", "TIM8 Update"]})
%% 	do i.update({45: ["TIM8_TRG_COM_IRQHandler", "TIM8 Trigger and Commutation"]})
%% 	do i.update({46: ["TIM8_CC_IRQHandler", "TIM8 Capture compare"]})
%% 	do i.update({47: ["ADC3_IRQHandler", "ADC3"]})
%% elif target is stm32f2 or target is stm32f4
%% 	do i.update({42: ["OTG_FS_WKUP_IRQHandler", "USB OTG FS Wakeup through EXTI line"]})
%% 	do i.update({43: ["TIM8_BRK_TIM12_IRQHandler", "TIM8 Break and TIM12"]})
%% 	do i.update({44: ["TIM8_UP_TIM13_IRQHandler", "TIM8 Update and TIM13"]})
%% 	do i.update({45: ["TIM8_TRG_COM_TIM14_IRQHandler", "TIM8 Trigger and Commutation and TIM14"]})
%% 	do i.update({46: ["TIM8_CC_IRQHandler", ""]})
%% 	do i.update({47: ["DMA1_Stream7_IRQHandler", ""]})
%% 	do i.update({48: ["FSMC_IRQHandler", ""]})
%% 	do i.update({49: ["SDIO_IRQHandler", ""]})
%% 	do i.update({50: ["TIM5_IRQHandler", ""]})
%% endif
%% do i.update({51: ["SPI3_IRQHandler", ""]})
%% do i.update({52: ["UART4_IRQHandler", ""]})
%% do i.update({53: ["UART5_IRQHandler", ""]})
%% do i.update({54: ["TIM6_DAC_IRQHandler", "TIM6 and DAC1&2 under-run errors"]})
%% do i.update({55: ["TIM7_IRQHandler", ""]})
%% do i.update({56: ["DMA2_Stream0_IRQHandler", "(DMA2_CH1)"]})
%% do i.update({57: ["DMA2_Stream1_IRQHandler", "(DMA2_CH2)"]})
%% do i.update({58: ["DMA2_Stream2_IRQHandler", "(DMA2_CH3)"]})
%% do i.update({59: ["DMA2_Stream3_IRQHandler", "(DMA2_CH4)"]})
%% do i.update({60: ["DMA2_Stream4_IRQHandler", "(DMA2_CH5)"]})
%% if target is stm32f3
%% 	do i.update({61: ["ADC4_IRQHandler", "ADC4"]})
%% 	do i.update({62: ["COMP123_IRQHandler", ""]})
%% 	do i.update({63: ["COMP456_IRQHandler", ""]})
%% 	do i.update({64: ["COMP7_IRQHandler", ""]})
%% 	do i.update({74: ["USB_HP_IRQHandler", "USB High priority"]})
%% 	do i.update({75: ["USB_LP_IRQHandler", "USB Low prioroty"]})
%% 	do i.update({76: ["USB_WKUP_IRQHandler", "USB Wakeup through EXTI"]})
%% elif target is stm32f2 or target is stm32f4
%% 	do i.update({61: ["ETH_IRQHandler", ""]})
%% 	do i.update({62: ["ETH_WKUP_IRQHandler", "Ethernet Wakeup through EXTI line"]})
%% 	do i.update({63: ["CAN2_TX_IRQHandler", ""]})
%% 	do i.update({64: ["CAN2_RX0_IRQHandler", ""]})
%% 	do i.update({65: ["CAN2_RX1_IRQHandler", ""]})
%% 	do i.update({66: ["CAN2_SCE_IRQHandler", ""]})
%% 	do i.update({67: ["OTG_FS_IRQHandler", ""]})
%% 	do i.update({68: ["DMA2_Stream5_IRQHandler", "DMA2 Stream 5"]})
%% 	do i.update({69: ["DMA2_Stream6_IRQHandler", "DMA2 Stream 6"]})
%% 	do i.update({70: ["DMA2_Stream7_IRQHandler", "DMA2 Stream 7"]})
%% 	do i.update({71: ["USART6_IRQHandler", "USART6"]})
%% 	do i.update({72: ["I2C3_EV_IRQHandler", "I2C3 event"]})
%% 	do i.update({73: ["I2C3_ER_IRQHandler", "I2C3 error"]})
%% 	do i.update({74: ["OTG_HS_EP1_OUT_IRQHandler", "USB OTG HS End Point 1 Out"]})
%% 	do i.update({75: ["OTG_HS_EP1_IN_IRQHandler", "USB OTG HS End Point 1 In"]})
%% 	do i.update({76: ["OTG_HS_WKUP_IRQHandler", "USB OTG HS Wakeup through EXTI"]})
%% 	do i.update({77: ["OTG_HS_IRQHandler", "USB OTG HS"]})
%% 	do i.update({78: ["DCMI_IRQHandler", "DCMI"]})
%% 	do i.update({79: ["CRYP_IRQHandler", "CRYP Crypto"]})
%% 	do i.update({80: ["HASH_RNG_IRQHandler", "Hash and Random Number Generator"]})
%% endif
%% do i.update({81: ["FPU_IRQHandler", "FPU"]})
%#
%% endif
%# (target is stm32f0)
%#
%% endmacro


%% macro startupCode()
%#
%% if target is stm32f3
	// enable clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
	// Remap USB Interrupts
	SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
%% endif

// TODO: check F_CPU to determine flash latency
%% if target is stm32f2
	// prepare flash latency for working at 120MHz and supply voltage > 2.7
	FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY) | FLASH_WAIT_STATE_3;
%% elif target is stm32f3
	// prepare flash latency for working at 72MHz and supply voltage > 2.7
	FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY) | FLASH_ACR_LATENCY_1;
%% elif target is stm32f4
	// prepare flash latency for working at 168MHz and supply voltage > 2.7
	FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY) | FLASH_WAIT_STATE_5;
%% endif

%% if target is stm32f2 or target is stm32f4
	// enable flash prefetch
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_ICEN;
%% elif target is stm32f3
	// enable flash prefetch
	FLASH->ACR |= FLASH_ACR_PRFTBE;
%% endif

%% if target is stm32f4
	// Enable Core Coupled Memory (CCM)
	RCC->AHB1ENR |= RCC_AHB1ENR_CCMDATARAMEN;
%% endif
%#
%% endmacro
