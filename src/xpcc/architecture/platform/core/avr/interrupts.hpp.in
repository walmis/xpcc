// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------
{{ generation_block }}

#ifndef XPCC_AVR_INTERRUPTS_HPP
#define XPCC_AVR_INTERRUPTS_HPP

#include "../../device.hpp"

namespace xpcc
{

namespace {{ target.family }}
{

/// @ingroup	{{ target.family }}
static ALWAYS_INLINE void
enableInterrupts()
{
	sei();
}

/// @ingroup	{{ target.family }}
static ALWAYS_INLINE void
disableInterrupts()
{
	cli();
}

%% if target.family == 'xmega'
/// Used to set the interrupt level of all modules.
/// @ingroup	xmega
enum class
InterruptLevel : uint8_t
{
	Off = 0x00,
	Low = 0x01,
	Medium = 0x02,
	High = 0x03,
};

/// @ingroup	xmega
enum class
InterruptControlLevel : uint8_t
{
	Low = PMIC_LOLVLEN_bm,
	Medium = PMIC_MEDLVLEN_bm,
	High = PMIC_HILVLEN_bm,
	All = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm,
};

/// @private
/// @{
static constexpr uint8_t
i(InterruptLevel level) { return static_cast<uint8_t>(level); }
static constexpr uint8_t
i(InterruptControlLevel level) { return static_cast<uint8_t>(level); }
/// @}

/**
 * Enable one or more of the three Interrupt levels.
 *
 * In order to work with interrupts on a xMEGA you need to enable
 * interrupts in general (enableInterrupts()) and enable the
 * level you wont to work with.
 *
 * Example:
 * @code
 * using namespace xpcc::xmega;
 * // reset all interrupt levels
 * resetInterruptLevel(InterruptControlLevel::All);
 * // set only High and Medium
 * setInterruptLevel(InterruptControlLevel::High);
 * setInterruptLevel(InterruptControlLevel::Medium);
 * enableInterrupts();
 * @endcode
 *
 * @ingroup	xmega
 */
static inline void
enableInterruptLevel(InterruptControlLevel level)
{
	PMIC_CTRL |= i(level);
}

/**
 * Disable interrupt levels.
 *
 * @ingroup	xmega
 */
static inline void
disableInterruptLevel(InterruptControlLevel level)
{
	PMIC_CTRL &= ~i(level);
}
%% endif

}	// namespace {{ target.family }}

}	// namespace xpcc


#endif	// XPCC_AVR_INTERRUPTS_HPP
 